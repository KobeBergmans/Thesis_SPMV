/**
 * @file input.cpp
 * @author Kobe Bergmans (kobe.bergmans@student.kuleuven.be)
 * @brief Test file for input matrices in different formats
 */

#include <boost/test/included/unit_test.hpp>

#include <vector>
#include <cmath>

#include "../Matrix/SparseMatrix.hpp"
#include "../Matrix/Triplet.hpp"
#include "GetMatrices.hpp"

#include "omp.h"
#include "oneapi/tbb.h"

BOOST_AUTO_TEST_SUITE(input_mv)

BOOST_AUTO_TEST_CASE(mv_arc130, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("Test_input/arc130.mtx", true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {7.833242759536130e+00, -6.993735475365190e+00, 1.936709185814659e+00, 2.503290850938932e+00, 3.339283448756583e-01, 5.869714739734910e-01, 9.986911518391108e-01, 1.003101641972662e+00, 1.004218398789794e+00, 1.002013153286248e+00, 9.391520197023548e-01, 9.718098842587097e-01, 1.004218398789794e+00, 1.028811178984129e+00, 9.906930076896483e-01, 1.000000000000000e+00, 1.003101641972661e+00, 1.000041660912518e+00, 1.000896397214176e+00,-6.816589735179274e+02,-1.084595375000000e+06,-1.053428656250000e+06,-6.898380781250000e+05,-9.646252226562500e+05,-9.248353828125000e+05, 1.740456342697133e+00, 9.420697018500712e-01, 1.049086261540483e+00, 1.151831865310630e+00, 1.070025980472519e+00, 2.215560913085917e+00, 8.621966830369048e-01, 1.039153825288474e+00, 1.231180489063188e+00, 1.099351406097324e+00, 2.367364883422827e+00, 8.088930876815595e-01, 1.006792400395448e+00, 1.252006113529105e+00, 1.108648717403296e+00, 2.239842414855931e+00, 7.948492078628132e-01, 9.537848090230652e-01, 1.225186288356672e+00, 1.100826203822965e+00, 1.955817461013772e+00, 8.174166444430848e-01, 9.434605348760020e-01, 1.173709630966085e+00, 1.083329916000251e+00, 1.642910003662092e+00, 8.625847668101152e-01, 9.487569629474911e-01, 1.119902253150857e+00, 1.063922047614959e+00, 1.385215580463398e+00, 9.132438301851473e-01, 9.612678530668286e-01, 1.077387571334780e+00, 1.047769121825630e+00, 1.210645496845238e+00, 9.568538181480447e-01, 9.798460863306148e-01, 1.049969587475024e+00, 1.036741930991371e+00, 1.110036253929134e+00, 9.880154319107257e-01, 9.973230699540945e-01, 1.035176958888749e+00, 1.030361384153345e+00, 1.059764284640550e+00, 1.007092889398330e+00, 1.010153356939538e+00, 1.028476625680914e+00, 1.027193285524834e+00, 1.037754297256469e+00, 1.017277095466850e+00, 1.017999485135074e+00, 1.025970183312889e+00, 1.025839652866120e+00, 1.029255405068398e+00, 1.022067971527575e+00, 1.022117994725703e+00, 1.025238625705240e+00, 1.025346063077448e+00, 1.026350062340498e+00, 1.024067506194115e+00, 1.024003818631172e+00, 1.025104723870754e+00, 1.025196127593516e+00, 1.025468096137047e+00, 1.024810910224915e+00, 1.024764768779278e+00, 1.025115087628365e+00, 1.025160629302263e+00, 1.025229826569557e+00, 1.025058060884476e+00, 1.025037329643965e+00, 1.025137882679701e+00, 1.025155592709780e+00, 1.025172512978315e+00, 1.025131687521935e+00, 1.025124348700047e+00, 1.025150395929813e+00, 1.025156177580357e+00, 1.025160226970911e+00, 1.025151398032904e+00, 1.025149203836918e+00, 1.025155294686556e+00, 1.025156926363707e+00, 1.025157883763313e+00, 1.025156144052744e+00, 1.025155574083328e+00, 1.025156859308481e+00, 1.025157265365124e+00, 1.025157485157251e+00, 1.025157172232866e+00, 1.025157041847706e+00, 1.025157287716866e+00, 1.025157377123833e+00, 1.025157421827316e+00, 1.025157373398542e+00, 1.025157347321510e+00, 1.025157388299704e+00, 1.025157406926155e+00, 1.025157414376736e+00, 1.025157406926155e+00, 1.025157403200865e+00, 1.025157410651445e+00,
     1.025157410651445e+00};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_gre_1107, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("Test_input/gre_1107.mtx", true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {1.272700000000000e+00, 1.636310000000000e+00,1.121110000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,9.999000000000000e-01,1.272710000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,7.575101787999999e-01,9.999000000000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,6.363001788000000e-01,7.575101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,6.363001788000000e-01,6.363001788000000e-01,7.575101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,6.363001788000000e-01,6.363001788000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,6.363001788000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,7.273100000000000e-01,8.485100000000000e-01,7.272200000000000e-01,1.121110000000000e+00,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,6.364100000000000e-01,8.788100000000000e-01,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.000010000000000e+00,1.121210000000000e+00,9.999199999999999e-01,8.484099999999999e-01,1.121110000000000e+00,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,8.787099999999999e-01,1.090820000000000e+00,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.000010000000000e+00,1.242410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.000010000000000e+00,1.121210000000000e+00,9.999199999999999e-01,1.121110000000000e+00,8.484099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,8.787099999999999e-01,1.242310000000000e+00,1.090820000000000e+00,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.000010000000000e+00,1.242410000000000e+00,1.151410000000000e+00,1.121110000000000e+00,1.121110000000000e+00,8.484099999999999e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.242310000000000e+00,1.242310000000000e+00,1.090820000000000e+00,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.000010000000000e+00,1.242410000000000e+00,1.121110000000000e+00,1.121110000000000e+00,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.242310000000000e+00,1.242310000000000e+00,8.787101787999999e-01,1.121110000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.242310000000000e+00};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

                        // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_G38, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("Test_input/G38.mtx", false, true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {37, 197,162,249,192,134,117,113,115,114,117, 60, 58,110, 64, 94, 40,134, 59, 52, 43,41,63,17,23,33,92,86,52,31,50,44,41,32,31,18,44,72,72,30,45,75,36,37,31,30,53,70,46,40,25,32,29,49,30,31,20,31,24,16,24,20,21,17,56,26,32,38,19,27,41,22,23,49,16,35,21,38,39,39,63,43,36,48,34,27,29,24,15,42,22,14,37,36,21,22,36,33,24,48,36,14,23,28,21,28,14,53,22,36,23,28,14,27,30,16,19,25,32,25,34,17,21,12,30,28,10,15,24, 9,34,18,14,22,23,18,20,23,37,20,23,31,37,13,31,20,17,31,29,28,20,16,23,34,29,30,28,20,29,13,22,16,21,15,15,22,34,20,21,25,21,26,19,33,22,28,18, 8,21,19,24,24,15,21,17, 9,18,23,22,17,18,20,34,19,15,21, 9,17,11,29,12,43,16,12,12,17,18,21,18,24,13,16,17,29,14,23,13,26,12,16,12,21,18,17,13,21,17,18,16,12,18,20,10, 9,12,19, 9,11,15,16, 9,19,16,17,21,20,23,22,18,11,15,21,12,18,16,13,17,14,16,16,29,10,12,28,13,15,21,11,15,39,13,16,10,12,20,15, 9,13,25,12, 9,18,11,15,15,13,22,17,12,23,13,22,30,15,12,13,10,14,11,11,21,12, 9,20,19,15,11,19, 9,19,20,20,11,16, 7, 9,12, 8,19,13,16,12,17,16,15,12,18,18,13,16,11,10,14,11, 8,18,10,12,11,13,10,15,12,15,14,21,14,18,19,13,23,16,12,14,14,23,11,16,17,13,12,11,18,17,16,26,15,10,18,23,15,18,22,11,12,15, 8, 8,14,16,12,16,12,16, 8,15, 6,18,15,14,15,17,14,11,14,19,10,11,18,12,10,11,16,10,16,14,22,11, 8, 8, 8,12,11,25,14,14,19,14, 6,10,11,11,12,12,10,11,13, 9,17,13,12,17,12,12, 8, 7,12, 7,10,11,10,15, 8,12,13,11, 9,10,17,16,10, 9,16,13,11,16,15,10,18, 7, 6, 8,20, 6,11, 8,12,11,13,12,13,11, 9, 8,10,13,13,10,11,12,11,15,15,17,10,17,15,11,10,11,14,12,13,12,16,12,17, 7, 9,15, 6,20,12,14,14,14,17,15,13,14,11,10,11,12, 9,15,11, 9,11,16, 8,20,10,12, 9,10,11,12, 7, 8,14,10,10,13,20, 9, 8,13,18,13,14,12,11,12,12,15,12, 9, 9,10,13, 8,12,14, 7,14,11, 7,12,11,10,12, 6,15,10, 6, 8, 8, 7,11,12,16,10, 9, 7,13,12,13, 6,15,11,12,13,18,11,15, 8, 9, 9, 7,13, 8,13,10,14, 7,10,10,10,10,10, 7,21, 8,10, 9, 6, 8, 7, 7,11,12,11,12, 8, 8, 8,15, 9, 9,16, 8,11,12,11,12, 9, 7, 7, 7,12, 9, 7,11,10,13,10, 7,11,14,18,17, 9,10,16,11, 7, 6, 8,15,10, 9,10,11,12, 9,11,10,11,16,10,11,14, 9, 7,10,12,14,13, 9, 7, 9,15, 8, 8,12,12, 9, 8, 8, 8,10, 7,14, 7,17, 8, 8,10, 9, 9,11, 9, 6, 9,10, 9, 7,15,13,11,12,10, 8,13,16,14, 8,19,12,10,11, 8, 9, 8, 8,10, 6, 7,10, 9,16, 7, 8,14, 9,11,11, 9, 8, 9, 9,10, 9,10,17,11, 9, 8,12, 6, 8, 7, 6,11, 8, 9, 7, 6, 6,11, 9,13,11, 9,10, 7,12,10, 8,17,12,12, 9,11,14,10,17,10,12, 8,11,14,10,11, 8,11, 9, 6, 9, 8,13,10, 8,10, 8, 8, 7, 8,17,12,11, 7, 8, 6, 6,10,12, 7, 8, 9, 9, 6, 7,11, 8, 7, 8, 8, 8,12,10, 6,10, 8, 9, 6,11, 9, 7, 8,13, 8, 7, 6, 9, 7,10,13, 8, 9, 7, 7,11, 8,11,10, 8,13,12,10, 9, 7, 7,11, 8, 6, 8,10, 7, 8, 9,12, 9, 6, 8,11, 6, 9, 8, 7,12, 8, 6, 9, 9, 9, 8, 6,15, 7, 9,11, 7,12,10, 7, 8, 9,10,10,12, 7, 9, 8,10,14,16,11, 8, 9,10, 8,10,15, 8, 7,11, 7, 6, 8, 8, 7, 7, 9,11, 9, 9,11, 9, 8, 8,10, 6, 6, 7,10, 7, 8, 9,10, 6, 8, 6,12, 8, 7,12, 7, 7, 8, 8,10, 9, 8, 9, 9, 8, 8, 8, 7, 8, 9, 8, 7, 9, 9, 8,12, 9,13, 7,13,11, 8, 8, 8, 6, 7, 6,10, 9, 6, 7, 8, 7, 9, 8, 7, 7, 9, 9,15, 6,12, 6, 7, 6, 9, 7, 8, 7, 6, 9, 7, 6,11, 7, 7,14, 7, 9,10, 7,13,10,15, 9,12, 8,13, 8, 6, 6, 6, 8, 8, 8,10,11,13, 9, 6, 6, 8,10, 6, 8, 9, 6, 8, 9,10, 6, 6, 7, 7, 6, 7, 6,12, 7, 8,13, 8, 7,12, 8, 6,10, 6, 6, 6, 8, 8, 7, 5, 8,10, 6,12,11, 8,10, 7,11, 8, 9, 7, 7, 8, 7, 9, 7, 5, 9, 9, 7,10, 9, 6, 8, 8, 6, 8, 6, 8, 9, 6, 7,11, 8, 7, 9,11, 8, 8, 7, 6, 6, 7, 6,12, 7, 7, 6, 9, 5, 8, 7,10,11,10, 6, 7,12, 9, 8, 8,11, 7, 6, 9, 7, 8,10,13, 7, 6, 6,13, 8, 6, 6, 7, 6, 6, 8, 9, 8,11, 7, 8, 7, 6, 8,11, 9, 9, 7, 9, 9, 7, 8, 7, 7,10, 6, 6, 9, 7, 9, 6,10, 5, 7,12,12, 7, 9, 7, 6, 8, 6, 7, 7, 6,11, 6,12, 9, 8, 7,13, 6, 6, 8, 7, 9,10, 7, 6, 9, 9, 9, 9, 8, 8, 6, 7, 9, 7, 6, 7, 8, 9, 6, 8, 7, 7, 7, 7, 9,10, 6, 7, 7, 7, 7,12,10, 6, 6, 7, 6,12, 9, 6,10, 6, 6, 8, 7,10, 6, 5, 6, 6,10, 9, 7, 6, 7, 7, 9, 7, 6,10, 6, 8, 7, 9, 6, 6,11, 6, 9, 7, 7, 7, 6, 6, 8, 9, 6,10, 7, 7, 8, 7, 7, 8, 7, 7, 9, 6, 8, 8, 6, 9, 7, 7, 7, 7, 7, 6, 6, 8, 8, 7, 8, 7, 4, 7, 8, 8, 6, 6, 7, 7, 7, 5,11, 6, 6, 8, 9, 7, 8, 9, 6, 6, 6, 6, 7, 8,10, 7, 7, 8, 7, 6, 9, 6, 6, 8, 8, 6,10, 7, 7, 6, 9, 8, 7, 7, 7, 6, 6, 6, 8, 6, 7, 7, 7, 5, 8, 9, 8, 8, 7, 7, 6, 7, 6, 8, 6,10, 9, 7, 7, 8, 8, 6, 7, 9, 6, 6, 8, 7, 6, 7, 5, 6, 6, 6, 8, 7, 8, 6, 8, 6, 7, 6, 8, 6, 7, 6, 6, 7, 9, 6, 7, 8, 7, 7, 8, 7, 9, 8, 7, 6, 7, 6,10, 6, 7, 8, 8, 6, 7, 7, 6, 8, 7, 6, 6, 6, 6, 8, 8, 7, 7, 6, 6, 6, 6, 7, 7, 8, 6, 7, 6, 6, 9, 9, 9, 9,10, 6, 9, 6, 7, 8, 6, 8, 6, 9, 8, 7, 6, 7, 7,11, 6, 7, 8, 6, 6, 7, 7, 6, 7, 8, 5, 9, 7, 8, 6, 8, 8, 6, 7, 6, 6, 7, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 7, 6, 7, 7, 9, 9, 8, 9, 7, 6, 7, 7, 6, 6, 6, 6, 6, 7, 5, 6, 7, 6, 8, 6, 8, 7, 6, 9, 7, 6, 7, 6, 6, 7, 5, 7, 6, 6, 8, 6, 7, 6, 7, 6, 6, 8, 6, 6, 7, 7, 6, 8, 5, 6, 6, 6, 7, 5, 8, 9, 9, 7, 8, 8, 7, 7, 6, 8, 7, 8, 7, 6, 6,10, 7, 8, 7, 6, 7, 7, 7, 6, 6, 6, 7, 6, 6, 7, 8, 8, 9, 6, 7, 7, 9, 7, 7, 6, 7, 6, 6, 7, 6, 8, 7, 9, 6, 6, 6, 6, 6, 7, 6, 7, 6, 6, 7, 7, 6, 9, 6, 6, 7, 8, 6, 6, 7, 6, 7, 6, 6, 5,10, 7, 6, 7, 6, 7, 6, 7, 6, 7, 7, 8, 7, 8, 7, 7, 9, 6, 9, 6, 6, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 6, 7, 7, 7, 6, 6, 6, 7, 7, 6, 9, 7, 6, 6, 7, 6, 6, 9, 6, 7, 7, 7,11, 5, 6, 6, 6, 6, 6, 6, 7, 7, 8, 6, 6, 8, 6, 6, 6, 7, 6, 6, 7, 8, 7, 7, 8, 6, 6, 7, 8, 7, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 7, 6, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 7, 5, 6, 7, 6, 7, 6, 8, 5, 7, 6, 6, 5, 6, 5, 7, 6, 7, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 6, 6, 6, 7, 6, 6, 8, 6, 7, 6, 7, 4, 5, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7, 8, 6, 7, 7, 5, 6, 6, 8, 6, 6, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 9, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 8, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

                        // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_mycielskian5, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("Test_input/mycielskian5.mtx", false, true, false); // Symmetric matrix!
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {8., 8.,  8.,  8.,  8.,  6.,  6.,  6.,  6.,  6., 10.,  5.,  5.,  5.,  5.,  5.,  4.,  4.,  4.,  4.,  4.,  6.,  11};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_mycielskian5_bin, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromBin("Test_input/mycielskian5.bin", 23, true, false); // Symmetric matrix!
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {8., 8.,  8.,  8.,  8.,  6.,  6.,  6.,  6.,  6., 10.,  5.,  5.,  5.,  5.,  5.,  4.,  4.,  4.,  4.,  4.,  6.,  11};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_8_4_bin_no_rand, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromBin("Test_input/test_mat_8_4.bin", std::pow(2, 8), false, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {0.,   0.,   1.,   0.,   2.,   0.,   0.,  12.,   0.,  10.,   0.,   2.,   0.,   9.,   0.,   1.,   0.,  17.,   0.,   2.,   0.,   0.,   0.,   3.,   2.,   0.,   3.,   1.,   1.,  71.,   0.,   0.,   0.,   4.,   0.,   3.,   0.,   3.,  55.,   1.,   1.,   1.,   0.,   0.,   0.,  54.,   0.,  10.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   0.,   0.,   0.,   0.,  45.,   0.,   4.,   0.,  17.,   1.,   6.,   0.,   0.,   0.,   0.,   4.,   3.,   0.,   0.,  10.,   0.,   0.,   0.,   0.,   5.,   0.,   0.,   2.,   0.,   1.,   2.,  17.,   0.,   1.,   0.,   2.,   0.,   0.,   0.,   0.,  10.,   3.,   0., 252.,   0.,   8.,   1.,   2.,   0.,   4.,   0.,   0.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   0.,   0.,   0.,   0.,   1.,   0.,   1.,   0.,   4.,   5.,   0.,   0.,   0.,   3.,   1.,   2.,  18.,   1.,   0.,   0.,   0.,  13.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,   0.,   0.,  30.,   1.,   1.,   0.,   5.,   0.,   1.,   0.,   0.,  11.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,  59.,   0.,   0.,   0.,   0.,  11.,   0.,   0.,   0.,   0.,  12.,   5.,   0.,  13.,   0.,   0.,   2.,   0.,   0.,   2.,   0.,   0.,   0.,   1.,  13.,   0.,   0.,   0.,   0.,   0.,   2.,   3.,   4.,   0.,   2.,   0.,   0.,   0.,   1.,   0.,   1.,  15.,   2.,   0.,   2.,   3.,   0.,   0.,   0.,   0.,   0.,   4.,   1.,   0.,   9.,   0.,   0.,  11.,   0.,   1.,  15.,   0.,   4.,   0.,   5.,   0.,   0.,   0.,   0.,   1.,   2.,   0.,   0.,   5.,   2.,   0.,   0.,  10.,   0.,   0.,   1.,   0.,   3.,   2.,   0.,   0.,  18.,   0.,   0.,0.};

    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(input_mv_unsigned)

BOOST_AUTO_TEST_CASE(mv_arc130_unsigned, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromMM("Test_input/arc130.mtx", true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {7.833242759536130e+00, -6.993735475365190e+00, 1.936709185814659e+00, 2.503290850938932e+00, 3.339283448756583e-01, 5.869714739734910e-01, 9.986911518391108e-01, 1.003101641972662e+00, 1.004218398789794e+00, 1.002013153286248e+00, 9.391520197023548e-01, 9.718098842587097e-01, 1.004218398789794e+00, 1.028811178984129e+00, 9.906930076896483e-01, 1.000000000000000e+00, 1.003101641972661e+00, 1.000041660912518e+00, 1.000896397214176e+00,-6.816589735179274e+02,-1.084595375000000e+06,-1.053428656250000e+06,-6.898380781250000e+05,-9.646252226562500e+05,-9.248353828125000e+05, 1.740456342697133e+00, 9.420697018500712e-01, 1.049086261540483e+00, 1.151831865310630e+00, 1.070025980472519e+00, 2.215560913085917e+00, 8.621966830369048e-01, 1.039153825288474e+00, 1.231180489063188e+00, 1.099351406097324e+00, 2.367364883422827e+00, 8.088930876815595e-01, 1.006792400395448e+00, 1.252006113529105e+00, 1.108648717403296e+00, 2.239842414855931e+00, 7.948492078628132e-01, 9.537848090230652e-01, 1.225186288356672e+00, 1.100826203822965e+00, 1.955817461013772e+00, 8.174166444430848e-01, 9.434605348760020e-01, 1.173709630966085e+00, 1.083329916000251e+00, 1.642910003662092e+00, 8.625847668101152e-01, 9.487569629474911e-01, 1.119902253150857e+00, 1.063922047614959e+00, 1.385215580463398e+00, 9.132438301851473e-01, 9.612678530668286e-01, 1.077387571334780e+00, 1.047769121825630e+00, 1.210645496845238e+00, 9.568538181480447e-01, 9.798460863306148e-01, 1.049969587475024e+00, 1.036741930991371e+00, 1.110036253929134e+00, 9.880154319107257e-01, 9.973230699540945e-01, 1.035176958888749e+00, 1.030361384153345e+00, 1.059764284640550e+00, 1.007092889398330e+00, 1.010153356939538e+00, 1.028476625680914e+00, 1.027193285524834e+00, 1.037754297256469e+00, 1.017277095466850e+00, 1.017999485135074e+00, 1.025970183312889e+00, 1.025839652866120e+00, 1.029255405068398e+00, 1.022067971527575e+00, 1.022117994725703e+00, 1.025238625705240e+00, 1.025346063077448e+00, 1.026350062340498e+00, 1.024067506194115e+00, 1.024003818631172e+00, 1.025104723870754e+00, 1.025196127593516e+00, 1.025468096137047e+00, 1.024810910224915e+00, 1.024764768779278e+00, 1.025115087628365e+00, 1.025160629302263e+00, 1.025229826569557e+00, 1.025058060884476e+00, 1.025037329643965e+00, 1.025137882679701e+00, 1.025155592709780e+00, 1.025172512978315e+00, 1.025131687521935e+00, 1.025124348700047e+00, 1.025150395929813e+00, 1.025156177580357e+00, 1.025160226970911e+00, 1.025151398032904e+00, 1.025149203836918e+00, 1.025155294686556e+00, 1.025156926363707e+00, 1.025157883763313e+00, 1.025156144052744e+00, 1.025155574083328e+00, 1.025156859308481e+00, 1.025157265365124e+00, 1.025157485157251e+00, 1.025157172232866e+00, 1.025157041847706e+00, 1.025157287716866e+00, 1.025157377123833e+00, 1.025157421827316e+00, 1.025157373398542e+00, 1.025157347321510e+00, 1.025157388299704e+00, 1.025157406926155e+00, 1.025157414376736e+00, 1.025157406926155e+00, 1.025157403200865e+00, 1.025157410651445e+00,
     1.025157410651445e+00};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_gre_1107_unsigned, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromMM("Test_input/gre_1107.mtx", true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {1.272700000000000e+00, 1.636310000000000e+00,1.121110000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,9.999000000000000e-01,1.272710000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,7.575101787999999e-01,9.999000000000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,6.363001788000000e-01,7.575101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,9.090000000000000e-01,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,6.363001788000000e-01,6.363001788000000e-01,7.575101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,6.363001788000000e-01,6.363001788000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,6.363001788000000e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.363610000000000e+00,1.121110000000000e+00,9.999201787999998e-01,1.121110000000000e+00,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,9.999201787999998e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.363610000000000e+00,7.273100000000000e-01,8.485100000000000e-01,7.272200000000000e-01,1.121110000000000e+00,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,7.575101787999999e-01,1.121110000000000e+00,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999099999999999e-01,3.636100000000000e-01,7.272200000000000e-01,8.787101788000000e-01,9.999201788000001e-01,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.272710000000000e+00,6.364100000000000e-01,8.788100000000000e-01,1.151410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.363610000000000e+00,1.000010000000000e+00,1.121210000000000e+00,9.999199999999999e-01,8.484099999999999e-01,1.121110000000000e+00,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,7.575101788000000e-01,7.575101787999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,9.999199999999999e-01,1.090820000000000e+00,9.999201788000001e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,9.999099999999999e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,7.272099999999999e-01,8.787099999999999e-01,1.090820000000000e+00,8.787101788000000e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.272710000000000e+00,1.000010000000000e+00,1.242410000000000e+00,1.151410000000000e+00,1.151410000000000e+00,1.000010000000000e+00,1.121210000000000e+00,9.999199999999999e-01,1.121110000000000e+00,8.484099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,7.575101788000000e-01,7.575101788000000e-01,7.575101787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,9.999199999999999e-01,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201788000001e-01,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999099999999999e-01,6.363099999999999e-01,9.999100000000001e-01,7.272099999999999e-01,8.787099999999999e-01,1.242310000000000e+00,1.090820000000000e+00,8.787101787999999e-01,8.787101787999999e-01,9.999201788000001e-01,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.272710000000000e+00,1.000010000000000e+00,1.242410000000000e+00,1.151410000000000e+00,1.121110000000000e+00,1.121110000000000e+00,8.484099999999999e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,7.575101788000000e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.363520000000000e+00,1.363520000000000e+00,1.090820000000000e+00,9.999201787999999e-01,9.999201787999999e-01,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,7.272099999999999e-01,1.242310000000000e+00,1.242310000000000e+00,1.090820000000000e+00,8.787101787999999e-01,8.787101787999999e-01,8.787101787999999e-01,1.000010000000000e+00,1.242410000000000e+00,1.121110000000000e+00,1.121110000000000e+00,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,7.575101788000000e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.363520000000000e+00,1.363520000000000e+00,9.999201787999999e-01,9.999100000000001e-01,9.999100000000001e-01,9.999100000000001e-01,1.242310000000000e+00,1.242310000000000e+00,8.787101787999999e-01,1.121110000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.363520000000000e+00,9.999100000000001e-01,1.242310000000000e+00};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_G38, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromMM("Test_input/G38.mtx", false, true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {37, 197,162,249,192,134,117,113,115,114,117, 60, 58,110, 64, 94, 40,134, 59, 52, 43,41,63,17,23,33,92,86,52,31,50,44,41,32,31,18,44,72,72,30,45,75,36,37,31,30,53,70,46,40,25,32,29,49,30,31,20,31,24,16,24,20,21,17,56,26,32,38,19,27,41,22,23,49,16,35,21,38,39,39,63,43,36,48,34,27,29,24,15,42,22,14,37,36,21,22,36,33,24,48,36,14,23,28,21,28,14,53,22,36,23,28,14,27,30,16,19,25,32,25,34,17,21,12,30,28,10,15,24, 9,34,18,14,22,23,18,20,23,37,20,23,31,37,13,31,20,17,31,29,28,20,16,23,34,29,30,28,20,29,13,22,16,21,15,15,22,34,20,21,25,21,26,19,33,22,28,18, 8,21,19,24,24,15,21,17, 9,18,23,22,17,18,20,34,19,15,21, 9,17,11,29,12,43,16,12,12,17,18,21,18,24,13,16,17,29,14,23,13,26,12,16,12,21,18,17,13,21,17,18,16,12,18,20,10, 9,12,19, 9,11,15,16, 9,19,16,17,21,20,23,22,18,11,15,21,12,18,16,13,17,14,16,16,29,10,12,28,13,15,21,11,15,39,13,16,10,12,20,15, 9,13,25,12, 9,18,11,15,15,13,22,17,12,23,13,22,30,15,12,13,10,14,11,11,21,12, 9,20,19,15,11,19, 9,19,20,20,11,16, 7, 9,12, 8,19,13,16,12,17,16,15,12,18,18,13,16,11,10,14,11, 8,18,10,12,11,13,10,15,12,15,14,21,14,18,19,13,23,16,12,14,14,23,11,16,17,13,12,11,18,17,16,26,15,10,18,23,15,18,22,11,12,15, 8, 8,14,16,12,16,12,16, 8,15, 6,18,15,14,15,17,14,11,14,19,10,11,18,12,10,11,16,10,16,14,22,11, 8, 8, 8,12,11,25,14,14,19,14, 6,10,11,11,12,12,10,11,13, 9,17,13,12,17,12,12, 8, 7,12, 7,10,11,10,15, 8,12,13,11, 9,10,17,16,10, 9,16,13,11,16,15,10,18, 7, 6, 8,20, 6,11, 8,12,11,13,12,13,11, 9, 8,10,13,13,10,11,12,11,15,15,17,10,17,15,11,10,11,14,12,13,12,16,12,17, 7, 9,15, 6,20,12,14,14,14,17,15,13,14,11,10,11,12, 9,15,11, 9,11,16, 8,20,10,12, 9,10,11,12, 7, 8,14,10,10,13,20, 9, 8,13,18,13,14,12,11,12,12,15,12, 9, 9,10,13, 8,12,14, 7,14,11, 7,12,11,10,12, 6,15,10, 6, 8, 8, 7,11,12,16,10, 9, 7,13,12,13, 6,15,11,12,13,18,11,15, 8, 9, 9, 7,13, 8,13,10,14, 7,10,10,10,10,10, 7,21, 8,10, 9, 6, 8, 7, 7,11,12,11,12, 8, 8, 8,15, 9, 9,16, 8,11,12,11,12, 9, 7, 7, 7,12, 9, 7,11,10,13,10, 7,11,14,18,17, 9,10,16,11, 7, 6, 8,15,10, 9,10,11,12, 9,11,10,11,16,10,11,14, 9, 7,10,12,14,13, 9, 7, 9,15, 8, 8,12,12, 9, 8, 8, 8,10, 7,14, 7,17, 8, 8,10, 9, 9,11, 9, 6, 9,10, 9, 7,15,13,11,12,10, 8,13,16,14, 8,19,12,10,11, 8, 9, 8, 8,10, 6, 7,10, 9,16, 7, 8,14, 9,11,11, 9, 8, 9, 9,10, 9,10,17,11, 9, 8,12, 6, 8, 7, 6,11, 8, 9, 7, 6, 6,11, 9,13,11, 9,10, 7,12,10, 8,17,12,12, 9,11,14,10,17,10,12, 8,11,14,10,11, 8,11, 9, 6, 9, 8,13,10, 8,10, 8, 8, 7, 8,17,12,11, 7, 8, 6, 6,10,12, 7, 8, 9, 9, 6, 7,11, 8, 7, 8, 8, 8,12,10, 6,10, 8, 9, 6,11, 9, 7, 8,13, 8, 7, 6, 9, 7,10,13, 8, 9, 7, 7,11, 8,11,10, 8,13,12,10, 9, 7, 7,11, 8, 6, 8,10, 7, 8, 9,12, 9, 6, 8,11, 6, 9, 8, 7,12, 8, 6, 9, 9, 9, 8, 6,15, 7, 9,11, 7,12,10, 7, 8, 9,10,10,12, 7, 9, 8,10,14,16,11, 8, 9,10, 8,10,15, 8, 7,11, 7, 6, 8, 8, 7, 7, 9,11, 9, 9,11, 9, 8, 8,10, 6, 6, 7,10, 7, 8, 9,10, 6, 8, 6,12, 8, 7,12, 7, 7, 8, 8,10, 9, 8, 9, 9, 8, 8, 8, 7, 8, 9, 8, 7, 9, 9, 8,12, 9,13, 7,13,11, 8, 8, 8, 6, 7, 6,10, 9, 6, 7, 8, 7, 9, 8, 7, 7, 9, 9,15, 6,12, 6, 7, 6, 9, 7, 8, 7, 6, 9, 7, 6,11, 7, 7,14, 7, 9,10, 7,13,10,15, 9,12, 8,13, 8, 6, 6, 6, 8, 8, 8,10,11,13, 9, 6, 6, 8,10, 6, 8, 9, 6, 8, 9,10, 6, 6, 7, 7, 6, 7, 6,12, 7, 8,13, 8, 7,12, 8, 6,10, 6, 6, 6, 8, 8, 7, 5, 8,10, 6,12,11, 8,10, 7,11, 8, 9, 7, 7, 8, 7, 9, 7, 5, 9, 9, 7,10, 9, 6, 8, 8, 6, 8, 6, 8, 9, 6, 7,11, 8, 7, 9,11, 8, 8, 7, 6, 6, 7, 6,12, 7, 7, 6, 9, 5, 8, 7,10,11,10, 6, 7,12, 9, 8, 8,11, 7, 6, 9, 7, 8,10,13, 7, 6, 6,13, 8, 6, 6, 7, 6, 6, 8, 9, 8,11, 7, 8, 7, 6, 8,11, 9, 9, 7, 9, 9, 7, 8, 7, 7,10, 6, 6, 9, 7, 9, 6,10, 5, 7,12,12, 7, 9, 7, 6, 8, 6, 7, 7, 6,11, 6,12, 9, 8, 7,13, 6, 6, 8, 7, 9,10, 7, 6, 9, 9, 9, 9, 8, 8, 6, 7, 9, 7, 6, 7, 8, 9, 6, 8, 7, 7, 7, 7, 9,10, 6, 7, 7, 7, 7,12,10, 6, 6, 7, 6,12, 9, 6,10, 6, 6, 8, 7,10, 6, 5, 6, 6,10, 9, 7, 6, 7, 7, 9, 7, 6,10, 6, 8, 7, 9, 6, 6,11, 6, 9, 7, 7, 7, 6, 6, 8, 9, 6,10, 7, 7, 8, 7, 7, 8, 7, 7, 9, 6, 8, 8, 6, 9, 7, 7, 7, 7, 7, 6, 6, 8, 8, 7, 8, 7, 4, 7, 8, 8, 6, 6, 7, 7, 7, 5,11, 6, 6, 8, 9, 7, 8, 9, 6, 6, 6, 6, 7, 8,10, 7, 7, 8, 7, 6, 9, 6, 6, 8, 8, 6,10, 7, 7, 6, 9, 8, 7, 7, 7, 6, 6, 6, 8, 6, 7, 7, 7, 5, 8, 9, 8, 8, 7, 7, 6, 7, 6, 8, 6,10, 9, 7, 7, 8, 8, 6, 7, 9, 6, 6, 8, 7, 6, 7, 5, 6, 6, 6, 8, 7, 8, 6, 8, 6, 7, 6, 8, 6, 7, 6, 6, 7, 9, 6, 7, 8, 7, 7, 8, 7, 9, 8, 7, 6, 7, 6,10, 6, 7, 8, 8, 6, 7, 7, 6, 8, 7, 6, 6, 6, 6, 8, 8, 7, 7, 6, 6, 6, 6, 7, 7, 8, 6, 7, 6, 6, 9, 9, 9, 9,10, 6, 9, 6, 7, 8, 6, 8, 6, 9, 8, 7, 6, 7, 7,11, 6, 7, 8, 6, 6, 7, 7, 6, 7, 8, 5, 9, 7, 8, 6, 8, 8, 6, 7, 6, 6, 7, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 7, 6, 7, 7, 9, 9, 8, 9, 7, 6, 7, 7, 6, 6, 6, 6, 6, 7, 5, 6, 7, 6, 8, 6, 8, 7, 6, 9, 7, 6, 7, 6, 6, 7, 5, 7, 6, 6, 8, 6, 7, 6, 7, 6, 6, 8, 6, 6, 7, 7, 6, 8, 5, 6, 6, 6, 7, 5, 8, 9, 9, 7, 8, 8, 7, 7, 6, 8, 7, 8, 7, 6, 6,10, 7, 8, 7, 6, 7, 7, 7, 6, 6, 6, 7, 6, 6, 7, 8, 8, 9, 6, 7, 7, 9, 7, 7, 6, 7, 6, 6, 7, 6, 8, 7, 9, 6, 6, 6, 6, 6, 7, 6, 7, 6, 6, 7, 7, 6, 9, 6, 6, 7, 8, 6, 6, 7, 6, 7, 6, 6, 5,10, 7, 6, 7, 6, 7, 6, 7, 6, 7, 7, 8, 7, 8, 7, 7, 9, 6, 9, 6, 6, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 6, 7, 7, 7, 6, 6, 6, 7, 7, 6, 9, 7, 6, 6, 7, 6, 6, 9, 6, 7, 7, 7,11, 5, 6, 6, 6, 6, 6, 6, 7, 7, 8, 6, 6, 8, 6, 6, 6, 7, 6, 6, 7, 8, 7, 7, 8, 6, 6, 7, 8, 7, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 7, 6, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 7, 5, 6, 7, 6, 7, 6, 8, 5, 7, 6, 6, 5, 6, 5, 7, 6, 7, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 6, 6, 6, 7, 6, 6, 8, 6, 7, 6, 7, 4, 5, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7, 8, 6, 7, 7, 5, 6, 6, 8, 6, 6, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 9, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 8, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

                        // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_mycielskian5_unsigned, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromMM("Test_input/mycielskian5.mtx", false, true, false); // Symmetric matrix!
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {8., 8.,  8.,  8.,  8.,  6.,  6.,  6.,  6.,  6., 10.,  5.,  5.,  5.,  5.,  5.,  4.,  4.,  4.,  4.,  4.,  6.,  11};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_mycielskian5_bin_unsigned, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromBin("Test_input/mycielskian5.bin", 23, true, false); // Symmetric matrix!
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {8., 8.,  8.,  8.,  8.,  6.,  6.,  6.,  6.,  6., 10.,  5.,  5.,  5.,  5.,  5.,  4.,  4.,  4.,  4.,  4.,  6.,  11};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(mv_8_4_bin_no_rand_unsigned, * boost::unit_test::tolerance(std::pow(10, -14))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromBin("Test_input/test_mat_8_4.bin", std::pow(2, 8), false, false);
    int mat_size = input_mat.col_size;
    
    // Precomputed solution using matlab
    double real_sol[] = {0.,   0.,   1.,   0.,   2.,   0.,   0.,  12.,   0.,  10.,   0.,   2.,   0.,   9.,   0.,   1.,   0.,  17.,   0.,   2.,   0.,   0.,   0.,   3.,   2.,   0.,   3.,   1.,   1.,  71.,   0.,   0.,   0.,   4.,   0.,   3.,   0.,   3.,  55.,   1.,   1.,   1.,   0.,   0.,   0.,  54.,   0.,  10.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   0.,   0.,   0.,   0.,  45.,   0.,   4.,   0.,  17.,   1.,   6.,   0.,   0.,   0.,   0.,   4.,   3.,   0.,   0.,  10.,   0.,   0.,   0.,   0.,   5.,   0.,   0.,   2.,   0.,   1.,   2.,  17.,   0.,   1.,   0.,   2.,   0.,   0.,   0.,   0.,  10.,   3.,   0., 252.,   0.,   8.,   1.,   2.,   0.,   4.,   0.,   0.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   0.,   0.,   0.,   0.,   1.,   0.,   1.,   0.,   4.,   5.,   0.,   0.,   0.,   3.,   1.,   2.,  18.,   1.,   0.,   0.,   0.,  13.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,   0.,   0.,  30.,   1.,   1.,   0.,   5.,   0.,   1.,   0.,   0.,  11.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,  59.,   0.,   0.,   0.,   0.,  11.,   0.,   0.,   0.,   0.,  12.,   5.,   0.,  13.,   0.,   0.,   2.,   0.,   0.,   2.,   0.,   0.,   0.,   1.,  13.,   0.,   0.,   0.,   0.,   0.,   2.,   3.,   4.,   0.,   2.,   0.,   0.,   0.,   1.,   0.,   1.,  15.,   2.,   0.,   2.,   3.,   0.,   0.,   0.,   0.,   0.,   4.,   1.,   0.,   9.,   0.,   0.,  11.,   0.,   1.,  15.,   0.,   4.,   0.,   5.,   0.,   0.,   0.,   0.,   1.,   2.,   0.,   0.,   5.,   2.,   0.,   0.,  10.,   0.,   0.,   1.,   0.,   3.,   2.,   0.,   0.,  18.,   0.,   0.,0.};

    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->mv(x,y);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(y[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(powerIteration_input)

BOOST_AUTO_TEST_CASE(powerIteration_arc130, * boost::unit_test::tolerance(std::pow(10, -12))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("Test_input/arc130.mtx", true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {2.492724633018974e-05, -2.390029079751346e-05,  9.572440154285601e-11, -1.109479628632532e-11,  1.715107887135334e-13,  3.217882304082448e-13, -1.103385548634800e-14,  3.804972004156662e-15,  1.882468120622790e-14,  1.140532528010935e-14, -4.594905476337396e-09, -2.320827044723591e-13,  1.882468120622791e-14,  3.063003439297170e-14, -7.616237553357624e-14,  9.144373928721132e-43,  3.804972004156651e-15, -2.552141537821988e-12, -3.614444536730160e-15,  2.345394485375163e-05, -9.999999988276607e-01,  2.413916021070737e-06, -1.502618542048214e-07,  6.580273154716977e-20,  6.631828979854100e-21,  1.505217311193943e-18, -2.908108657714851e-17,  2.023037754317203e-22, -1.083417245222760e-25, -1.179250234161811e-26,  3.232387725635387e-08, -4.253028950103695e-14,  3.500727758463204e-18, -2.461158769088564e-25, -2.371662405296508e-26,  2.441597623040829e-05, -9.709691231986644e-12,  3.158497694918372e-14, -3.405279088750418e-25, -3.170354596220193e-26,  9.613918117342152e-08, -4.725999046775580e-11,  3.068545850069518e-12, -3.572140791950370e-25, -3.379215405504973e-26,  1.241625888841511e-13, -4.874748886745859e-12,  9.112121257184283e-13, -3.069491249112258e-25, -3.049410847276142e-26,  5.983033908266379e-19, -4.417361316865787e-14,  3.067671212294626e-15, -2.232127347602557e-25, -2.392621564417478e-26,  2.906737113546671e-19, -2.383116132109114e-16,  1.569211620952665e-18, -1.375234202085984e-25, -1.652061731301824e-26,  1.446550408766568e-19, -3.363870499144852e-18,  1.423922154806218e-21, -6.985855466232769e-26, -1.012985515704650e-26,  6.906566290005820e-20, -1.775352932370874e-19,  9.989737052140664e-24, -2.797138906980411e-26, -5.598427441933988e-27,  3.043238914248902e-20, -1.863352857380007e-20,  5.058331373195670e-25, -8.822788286630944e-27, -2.835705943917218e-27,  1.215604059972376e-20, -2.306664397097668e-21,  6.387263749122422e-26, -2.492666863481531e-27, -1.325242311424826e-27,  4.421046919925564e-21, -2.708778096203366e-22,  1.191369106005722e-26, -7.641908724116118e-28, -5.702200070880650e-28,  1.470438915185142e-21, -2.762550553171631e-23,  2.826480477014610e-27, -2.666214528287778e-28, -2.248519241544640e-28,  4.450576621929338e-22, -2.358631566905962e-24,  7.512050477594792e-28, -9.591616969540117e-29, -8.099239148449887e-29,  1.219136530295899e-22, -1.664052789972254e-25,  1.988899583820249e-28, -3.266229613456442e-29, -2.660296808107736e-29,  3.016669594564926e-23, -9.809816746503891e-27,  4.917391644914019e-29, -1.016476204363154e-29, -7.963685200252959e-30,  6.737259576708041e-24, -5.198926435409626e-28,  1.106465704700631e-29, -2.862493410156643e-30, -2.171746248176351e-30,  1.358528192832975e-24, -3.286162656589790e-29,  2.245307575584594e-30, -7.283612954709367e-31, -5.397250090223691e-31,  2.474209551260810e-25, -3.556879472566343e-30,  4.094532802665354e-31, -1.675059552087905e-31, -1.222350384316561e-31,  4.069920466191034e-26, -5.371192394150234e-31,  6.692700063432779e-32, -3.484628829395268e-32, -2.523009568753440e-32,  6.051792861149525e-27, -8.243952012206658e-32,  9.774577391985403e-33, -6.561899876147630e-33, -4.747971448455573e-33};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->powerIteration(x, y, 100);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(x[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(powerIteration_G38, * boost::unit_test::tolerance(std::pow(10, -12))) {
    pwm::Triplet<double, int> input_mat;
    input_mat.loadFromMM("Test_input/G38.mtx", false, true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {7.018755101878695e-02, 2.442001685069157e-01, 1.791359066672807e-01, 3.155949487683005e-01, 2.239056338769425e-01, 1.699052944759452e-01, 1.469505494265476e-01, 1.304238524328237e-01, 1.354862594698490e-01, 1.280247882912866e-01, 1.379233202194056e-01, 1.020449086249243e-01, 7.724223589720020e-02, 1.224806824279476e-01, 7.442480756395499e-02, 9.771152071110686e-02, 6.099656085764610e-02, 1.464501129358039e-01, 5.996364706836041e-02, 5.717873966627790e-02, 5.448399019488614e-02, 5.139861013146822e-02, 7.375157892571758e-02, 4.127820310762707e-02, 5.057927391000699e-02, 4.731987228068461e-02, 1.024524537397698e-01, 9.802644140930790e-02, 5.099584306032862e-02, 4.177511021607015e-02, 5.939217513674671e-02, 6.159888980898130e-02, 5.222544787889316e-02, 4.720226706959365e-02, 3.693883783311096e-02, 2.293369530695809e-02, 5.168807377829693e-02, 7.094817054729928e-02, 6.980157843564054e-02, 4.899070949741618e-02, 5.645697352079112e-02, 7.307882788037302e-02, 4.696739536098742e-02, 5.042673737687613e-02, 4.103661058108397e-02, 5.160113768857039e-02, 5.090299811003664e-02, 6.464478396274101e-02, 6.354564905454246e-02, 5.572551608300658e-02, 4.662967481100234e-02, 4.194834207564526e-02, 3.585905881663597e-02, 6.005432430176307e-02, 4.124786219074176e-02, 3.207943720450168e-02, 2.784404124514140e-02, 3.654937224163091e-02, 4.011479140977668e-02, 2.713978850375775e-02, 3.781827074661633e-02, 3.523165787778590e-02, 4.167668632805444e-02, 3.848638466745847e-02, 5.287582069818227e-02, 4.333146439895246e-02, 4.220492817916022e-02, 4.224853213011139e-02, 4.184340863326450e-02, 3.141632546000004e-02, 3.999366946508429e-02, 3.931927974732933e-02, 4.372544148505143e-02, 5.080263334146705e-02, 2.463257124748323e-02, 3.471853473986493e-02, 3.435609445287251e-02, 4.019171577320303e-02, 4.179470717763500e-02, 3.685846945240153e-02, 5.471527445472739e-02, 5.453732157829685e-02, 3.914626810042336e-02, 4.355634176979908e-02, 4.557461044782554e-02, 4.570377060561159e-02, 3.025158064714845e-02, 2.560469006785475e-02, 3.011290786184602e-02, 3.724615716978680e-02, 3.547725046099312e-02, 2.209402836485670e-02, 4.910652201740226e-02, 4.229686727715604e-02, 3.356472173554169e-02, 2.681957957740947e-02, 3.714642884232458e-02, 4.022990180424552e-02, 4.007135122247866e-02, 3.745945630296001e-02, 3.621895196501421e-02, 2.839466616122927e-02, 2.980429118476205e-02, 3.094119146978450e-02, 2.297694652014160e-02, 4.461477944334644e-02, 2.835254580760251e-02, 4.975079673066877e-02, 2.349631579622746e-02, 3.420476064223620e-02, 3.359495151856780e-02, 3.270047009717620e-02, 3.125812712615506e-02, 2.116481555977200e-02, 2.576221964919026e-02, 2.667559539631923e-02, 3.939224053120333e-02, 2.517588250342808e-02, 3.358580423176939e-02, 3.743540160311355e-02, 2.453605673822270e-02, 2.688338603038434e-02, 2.531125286048008e-02, 2.877849493103402e-02, 3.723155330252979e-02, 4.082569063188148e-02, 2.450535345681581e-02, 2.699540023387215e-02, 3.306921968973429e-02, 1.039918052813910e-02, 3.454706748849320e-02, 3.592507001790516e-02, 2.482612226750941e-02, 1.811303044645325e-02, 3.355900161810478e-02, 2.181657767219171e-02, 3.816039277881386e-02, 2.209620198133119e-02, 2.795034402565085e-02, 3.175646435619647e-02, 2.611702656758814e-02, 3.259863256252478e-02, 3.426577244842036e-02, 2.695290860622604e-02, 2.758600079289394e-02, 3.750107614638445e-02, 2.645715062321733e-02, 2.615644483023633e-02, 3.226039769802700e-02, 2.761132806845679e-02, 3.035049176751340e-02, 3.085806767095566e-02, 2.573345848298293e-02, 4.399431174831552e-02, 2.461526975664489e-02, 2.540082652839385e-02, 3.370998304217721e-02, 2.471274027646599e-02, 2.575829047546926e-02, 2.786765391295712e-02, 1.869179494475287e-02, 2.388854823068112e-02, 2.467548084683406e-02, 3.261092801891975e-02, 1.302275586207832e-02, 2.271523235361582e-02, 4.448083966908727e-02, 2.680346424219189e-02, 2.594694385345398e-02, 3.295989946215781e-02, 2.767567864516975e-02, 2.179127673350878e-02, 2.104788943853840e-02, 2.639518059316863e-02, 2.634314961752308e-02, 1.838989011890158e-02, 1.833974789728829e-02, 2.256337781660165e-02, 1.436810963328371e-02, 1.940499262801514e-02, 2.766767963468551e-02, 3.512828427814989e-02, 1.984590900234687e-02, 2.893519999463554e-02, 2.968342015379934e-02, 1.996410435637004e-02, 2.426892523239569e-02, 2.297396913127142e-02, 2.111697772693942e-02, 3.181137692292194e-02, 2.675425879393097e-02, 1.086846831804944e-02, 3.759589529336664e-02, 2.280146922278429e-02, 1.819497173774054e-02, 2.063644496716279e-02, 2.270901537373499e-02, 1.270982226259938e-02, 1.973449055315980e-02, 1.761895088995177e-02, 2.719658082080443e-02, 2.656389894483613e-02, 1.473221469219742e-02, 2.228124026476882e-02, 2.727653484066386e-02, 2.189052592286641e-02, 2.316594100379423e-02, 2.892494107684859e-02, 1.404388194323369e-02, 2.011572422803489e-02, 1.088150553445331e-02, 1.852536185358338e-02, 3.265064472550145e-02, 3.853512439531204e-02, 2.175549966660117e-02, 2.651179872322488e-02, 2.920541573737492e-02, 3.137447268565548e-02, 1.575817256848497e-02, 1.328489953080951e-02, 1.233490101831306e-02, 1.923072005187391e-02, 4.247162586594300e-02, 1.943817531990653e-02, 8.543639458333752e-03, 2.295449855685652e-02, 1.558961509902430e-02, 2.611747516214348e-02, 2.356850081201824e-02, 1.341001851551853e-02, 3.306751336065782e-02, 1.592244900527083e-02, 1.969833876604556e-02, 1.486892435254054e-02, 1.612910837715945e-02, 1.557958211799735e-02, 1.171712670254146e-02, 1.502070509535000e-02, 2.340701962724612e-02, 2.095305301134348e-02, 1.439552664591933e-02, 3.189320364733799e-02, 1.136985552693155e-02, 1.519222669751328e-02, 1.862069530118277e-02, 1.582987322584033e-02, 2.741027938932878e-02, 1.640614416594809e-02, 1.851560364167305e-02, 1.472945122271564e-02, 1.409727557573914e-02, 1.594541184778146e-02, 1.610293448950480e-02, 2.942631344803042e-02, 3.201406818595425e-02, 1.385842373334010e-02, 1.769351424343803e-02, 2.580485522491164e-02, 2.180518914543362e-02, 1.361828993011185e-02, 2.954660736401423e-02, 1.299714972074803e-02, 1.729785686899784e-02, 2.516716227909655e-02, 1.420023341040060e-02, 1.636876971648899e-02, 1.621640059195951e-02, 1.688706732197422e-02, 1.087903504073934e-02, 2.790449912458285e-02, 1.688932122158436e-02, 1.749326486602976e-02, 6.516322481344735e-03, 3.415674288938870e-02, 1.503447947249325e-02, 2.643407522527194e-02, 1.516229522700117e-02, 1.658090640271777e-02, 1.366544525753361e-02, 1.460252612750456e-02, 1.119538887263396e-02, 1.805016901363928e-02, 9.667578669323695e-03, 1.986662296747654e-02, 8.820627222224058e-03, 1.456071445648433e-02, 1.674403205908247e-02, 1.381210813971453e-02, 2.517168241288489e-02, 1.462686308455838e-02, 1.208160998887694e-02, 2.505817452888021e-02, 2.382969744993811e-02, 1.598230049689810e-02, 1.369448664271854e-02, 1.948575976129903e-02, 1.056393204900767e-02, 2.255892555499768e-02, 2.021364734095509e-02, 9.048818751237201e-03, 1.887725534003863e-02, 6.682711842071708e-03, 1.909795612775680e-02, 1.140453567317810e-02, 2.753721093395758e-02, 3.302614628109211e-02, 1.271023862016258e-02, 2.560886835232716e-02, 1.320444982937820e-02, 1.284651149286557e-02, 3.044008777348749e-02, 1.348673729918045e-02, 1.591370277044838e-02, 1.295710986014382e-02, 1.087895951344948e-02, 2.279796131887624e-02, 2.612211134456242e-02, 1.259175515327875e-02, 2.558882522652023e-02, 9.618380487430595e-03, 1.479852222228800e-02, 2.309797996464382e-02, 1.603081015911888e-02, 1.415910694050197e-02, 1.728306303761338e-02, 1.276778105983601e-02, 3.308172190577766e-02, 1.976521807968108e-02, 1.690333008539276e-02, 1.226208647460899e-02, 1.475601668886631e-02, 8.053622461151062e-03, 1.113074540705208e-02, 1.475559256834044e-02, 7.281388280548275e-03, 2.036174783536427e-02, 1.918243831992948e-02, 1.889056319622194e-02, 1.624476983848635e-02, 1.322844828162619e-02, 8.020529528923785e-03, 9.302205788988091e-03, 2.324904458901371e-02, 1.716112924105871e-02, 2.565409074617520e-02, 3.171766615483474e-02, 2.108725474057984e-02, 1.748220865296804e-02, 1.877150227641148e-02, 1.179498837362512e-02, 1.009581689549094e-02, 1.972388203401981e-02, 2.671778467594478e-02, 7.248630745392504e-03, 2.049758156114483e-02, 2.426019675656863e-02, 2.259358188046992e-02, 1.476649363720404e-02, 1.568858388521633e-02, 1.979527953814779e-02, 1.028400417939656e-02, 1.504105487922332e-02, 2.380291237568271e-02, 2.000368809081790e-02, 2.527867512616310e-02, 2.376261346145127e-02, 3.050324882532027e-02, 1.659822607471730e-02, 1.633058988070616e-02, 2.662405223686632e-02, 2.353547572691782e-02, 1.281277619877899e-02, 1.628560720155155e-02, 7.017307762226649e-03, 8.491754539053646e-03, 2.502135472001487e-02, 2.084876680928709e-02, 2.543657152832098e-02, 2.524504885878487e-02, 1.598332224733351e-02, 2.068760225812289e-02, 1.668864349762408e-02, 1.023224897447422e-02, 1.524729970487614e-02, 8.696387826393559e-03, 1.231922484400945e-02, 1.033712500309784e-02, 1.048348566152360e-02, 9.392006445288198e-03, 7.813433187350569e-03, 7.865976762476619e-03, 1.220836398835655e-02, 1.916076834981000e-02, 8.940412018597677e-03, 1.751776381691593e-02, 1.490817412706738e-02, 1.767142538825853e-02, 2.405308447688409e-02, 1.198748246389371e-02, 1.231995572168034e-02, 2.486419130919133e-02, 1.951865623979126e-02, 1.747915792501724e-02, 8.492328282129966e-03, 1.668374386254963e-02, 1.754618921979211e-02, 1.458307197409197e-02, 8.323137337361800e-03, 1.274062932392880e-02, 8.410188115323253e-03, 1.269005893347873e-02, 1.136442787850834e-02, 8.818782412170273e-03, 2.160634516284012e-02, 1.340810321012038e-02, 1.006245788726925e-02, 2.762121077490938e-02, 8.537116149667495e-03, 6.009428002665076e-03, 2.111747808710827e-02, 1.434229327242569e-02, 7.272025712679286e-03, 1.219049851176034e-02, 8.042540619441913e-03, 2.166340241441417e-02, 7.659405613821853e-03, 2.160681106352005e-02, 2.567201033409875e-02, 1.999959083056831e-02, 1.246444916488348e-02, 9.267771103405145e-03, 1.472230874709612e-02, 1.314851736976928e-02, 8.207612478590377e-03, 1.636601311369268e-02, 1.807796753537621e-02, 7.688082217271478e-03, 2.071540162988856e-02, 7.788185088534047e-03, 1.597767579172581e-02, 2.293052144704397e-02, 1.182270567175115e-02, 2.032551844868519e-02, 1.376179972550015e-02, 1.093443191896552e-02, 1.384338120324941e-02, 1.163217670559371e-02, 1.039524542468869e-02, 9.966850307538562e-03, 1.217960730942943e-02, 1.073913075589897e-02, 6.763783609254184e-03, 1.517778500440018e-02, 2.270592729279900e-02, 1.846622390006604e-02, 2.623890707605648e-02, 7.533364822009709e-03, 1.853978032518270e-02, 8.041290967190102e-03, 1.460460987080742e-02, 2.659223146872393e-02, 1.703228597509044e-02, 1.416663531464171e-02, 1.666648617882595e-02, 1.907056506395445e-02, 1.430534552992007e-02, 7.696779977048847e-03, 1.167326555493785e-02, 1.436149273056273e-02, 1.838692412368310e-02, 1.353724869235065e-02, 1.681279417777634e-02, 1.151803808067636e-02, 1.031435059996114e-02, 8.337015895772435e-03, 2.277075983165193e-02, 2.397243116839223e-02, 1.812170997012602e-02, 1.874333207809841e-02, 8.697973516992316e-03, 8.184110567891815e-03, 2.108661660683940e-02, 8.693661360300944e-03, 1.426733294264401e-02, 1.462770829876488e-02, 8.695908844725686e-03, 8.654863617670460e-03, 1.934971945094445e-02, 8.209769280919311e-03, 2.430281348519689e-02, 1.027999912041226e-02, 2.059710697393800e-02, 1.323462918456739e-02, 9.383358080911165e-03, 1.388579764401855e-02, 8.494765205142233e-03, 1.426912993835203e-02, 4.212101279016381e-03, 1.435120968219186e-02, 1.083143579845970e-02, 1.991598193427021e-02, 1.134117611488289e-02, 2.042137454721106e-02, 1.517747714823597e-02, 2.301683551594378e-02, 8.337077429131813e-03, 2.699461485525742e-02, 1.300178527741041e-02, 1.323824982692387e-02, 1.404003021922931e-02, 7.012093935202459e-03, 1.157535791662150e-02, 2.493419391913631e-02, 1.567677143370843e-02, 1.931190241358753e-02, 2.412480373773626e-02, 6.927283812134376e-03, 1.550015182584239e-02, 8.866999581439808e-03, 9.370222142210612e-03, 6.572951009258939e-03, 1.299160583410158e-02, 5.595079888014731e-03, 1.640633980935979e-02, 1.807879608294467e-02, 1.144886587652079e-02, 1.744439649377878e-02, 1.070279205450398e-02, 9.054277081260395e-03, 3.085483378566610e-02, 9.642994282853479e-03, 1.620899907570708e-02, 9.232946394178890e-03, 1.173449464657123e-02, 2.218921336525824e-02, 8.835161644762203e-03, 1.916393618914874e-02, 8.023629121563597e-03, 2.715375776553675e-02, 2.048842144586965e-02, 1.262416515047694e-02, 1.788006823135449e-02, 8.932237345090141e-03, 7.692833238072531e-03, 1.044603183265274e-02, 1.378220348643824e-02, 8.093322739186740e-03, 1.199346492964681e-02, 7.737924595955168e-03, 1.537673395474208e-02, 1.310659231672941e-02, 1.434423296828824e-02, 8.700043045543806e-03, 2.821374793500210e-02, 1.151333675659719e-02, 9.127330928219188e-03, 1.414829939639849e-02, 1.711193273353952e-02, 5.966149195261374e-03, 2.166192301563935e-02, 2.055088162575508e-02, 2.266179605366993e-02, 8.983664753864560e-03, 1.824887916710485e-02, 1.437933847857665e-02, 8.944606895036159e-03, 6.286783518714370e-03, 1.405510513839882e-02, 9.413427073152590e-03, 2.299452285041325e-02, 3.009841846273621e-02, 1.641260220993563e-02, 2.244948280326042e-02, 8.006598383785320e-03, 4.636590869082449e-03, 1.844039448403655e-02, 1.327624999697228e-02, 1.668949945528583e-02, 3.772541680253508e-03, 1.056851714288365e-02, 1.346751129585476e-02, 2.095147098450785e-02, 7.787656017985119e-03, 2.160280105604599e-02, 5.487819452444572e-03, 1.570994601457502e-02, 1.772453349140525e-02, 1.530244539174905e-02, 5.552207937932657e-03, 1.461356661377125e-02, 6.424769191213045e-03, 9.599391607120009e-03, 5.005172640064393e-03, 1.858699553764835e-02, 1.124826461627598e-02, 2.024692678008108e-02, 1.799116676869847e-02, 1.062160514565367e-02, 1.107031116097424e-02, 1.596587087763586e-02, 1.176096993193052e-02, 5.317235366553908e-03, 1.507443239058887e-02, 7.681609830586505e-03, 4.931150847795084e-03, 1.583825956682019e-02, 1.945237064219168e-02, 2.098954370738423e-02, 1.013121459647855e-02, 1.833306790665164e-02, 1.170386294090672e-02, 6.628629147323831e-03, 5.349216888537105e-03, 6.705852988791177e-03, 1.053201841541195e-02, 1.421222082165010e-02, 1.409674185858016e-02, 7.555671306457059e-03, 1.164301098258756e-02, 1.760654755378076e-02, 2.183303008960246e-02, 7.501177361390359e-03, 1.579876206375458e-02, 1.485684451458293e-02, 1.004432037166740e-02, 2.063020056692887e-02, 1.147193512825632e-02, 1.161522314583657e-02, 5.374221450875684e-03, 8.345535188390350e-03, 2.256895883653085e-02, 4.654434856562789e-03, 6.948109709588522e-03, 1.785605817829125e-02, 4.791134758314097e-03, 7.688466610262994e-03, 9.958790089897179e-03, 5.629828739058765e-03, 1.531080468685766e-02, 1.117954679751807e-02, 2.124120376691892e-02, 1.548546465513259e-02, 8.937812076658645e-03, 1.036961210873559e-02, 1.961885686500030e-02, 1.355410442631511e-02, 9.822409240676308e-03, 8.513141701040394e-03, 9.647005847262156e-03, 7.262692686724103e-03, 6.465195876495095e-03, 7.635215024101249e-03, 1.175251899370993e-02, 1.647164203579479e-02, 8.007802388025068e-03, 1.005594321123824e-02, 1.716028840101607e-02, 2.386694120292794e-02, 9.863495638687172e-03, 1.661272750609781e-02, 8.971311486963464e-03, 5.231800492035754e-03, 8.234005665833133e-03, 1.315424624393706e-02, 1.453844855460516e-02, 7.336502244234212e-03, 1.802987959492746e-02, 1.771033432311218e-02, 7.053558706062608e-03, 7.008616925375185e-03, 9.721701103765187e-03, 8.736463629451926e-03, 1.047867852951441e-02, 6.074445954351724e-03, 1.055365789185018e-02, 1.103266234277737e-02, 6.654202352898983e-03, 6.786996949608075e-03, 4.014163973249755e-03, 1.419936269340140e-02, 5.361085481397302e-03, 1.717907902927458e-02, 2.064540397312533e-02, 9.406364541298272e-03, 5.038846215742885e-03, 9.132511594295149e-03, 1.060416491364699e-02, 7.928352594984006e-03, 9.160488834838554e-03, 1.890548856312294e-02, 1.521818397207645e-02, 1.511293156123564e-02, 1.406256319061086e-02, 1.453074750604838e-02, 1.462994054437037e-02, 1.410958623727226e-02, 1.860361128634387e-02, 9.729255042464186e-03, 2.477764028087674e-02, 1.585962643898643e-02, 6.257584924050420e-03, 6.631598911182527e-03, 1.554493713947572e-02, 6.579552315008143e-03, 1.079693866210093e-02, 9.300325372751231e-03, 7.990248782282210e-03, 8.011187689042047e-03, 1.507470542513526e-02, 1.712121986347351e-02, 1.027043841176949e-02, 1.919482990453911e-02, 1.127484834888264e-02, 7.225481483828536e-03, 5.848431454795594e-03, 1.596917290027382e-02, 9.202253679954664e-03, 1.584116486454590e-02, 5.492485332936587e-03, 1.566665494135230e-02, 1.392452438464026e-02, 1.490546320356421e-02, 1.128489673371287e-02, 2.008266375361450e-02, 7.406002026222967e-03, 1.215366952625727e-02, 5.728148313284526e-03, 6.768355174717450e-03, 8.424459742391548e-03, 8.651133698667374e-03, 1.055901823051280e-02, 4.181644620473813e-03, 4.335556501847177e-03, 6.445379964204719e-03, 2.086139833115225e-02, 1.287632918102450e-02, 1.952844996043376e-02, 1.970177182329903e-02, 8.654165591185491e-03, 1.095633647084782e-02, 1.662305947218592e-02, 9.050677152778974e-03, 1.298267087473654e-02, 1.375868274846912e-02, 2.213581163455351e-02, 1.383448432291145e-02, 2.218066257246941e-02, 5.410971329544757e-03, 4.863796090922607e-03, 4.366369766125282e-03, 2.710069619018926e-02, 1.378538333918233e-02, 5.057964082016396e-03, 1.252792250966264e-02, 7.355544393034420e-03, 1.183315081478797e-02, 8.157468331090375e-03, 1.423699505953394e-02, 1.295240860665191e-02, 2.188650361244003e-02, 1.377559740150762e-02, 9.719270949497266e-03, 9.788006023622963e-03, 3.713398410862666e-03, 6.956735043056173e-03, 7.605000049267938e-03, 7.834794974938736e-03, 1.550844553807941e-02, 1.633355285394584e-02, 1.897832357116702e-02, 8.803845134716604e-03, 8.228791886949730e-03, 6.072019866421840e-03, 1.653209621490014e-02, 1.120940263723356e-02, 1.085906389321068e-02, 2.543533666656545e-02, 7.650757746159553e-03, 1.298216953753029e-02, 1.212269763937293e-02, 1.020482717688681e-02, 1.443306060266561e-02, 1.160947184466706e-02, 7.952595070573960e-03, 1.580270454629033e-02, 1.708087566938389e-02, 4.422044259799643e-03, 1.081587521563026e-02, 1.156718995327182e-02, 1.338247779304787e-02, 1.361696037734056e-02, 1.397742575549220e-02, 1.140170550054768e-02, 5.513842909843425e-03, 5.468081175526231e-03, 1.652307238684735e-02, 1.703826580894349e-02, 1.124510889582360e-02, 4.538946016832135e-03, 6.203514080848258e-03, 1.506627853576618e-02, 4.080302055116337e-03, 6.263123273440809e-03, 7.806612463121102e-03, 1.337627097489087e-02, 2.089569082865183e-02, 6.242261102378295e-03, 8.210595289873536e-03, 4.581846889049329e-03, 2.547444711591088e-02, 6.389055559760927e-03, 7.165335853861516e-03, 1.018394379588372e-02, 6.290330668281033e-03, 9.146534998472093e-03, 4.633433268142629e-03, 1.479508002607224e-02, 1.267531234943141e-02, 1.976345320675359e-02, 1.381347871753925e-02, 1.056213316209601e-02, 7.656322689795303e-03, 9.178937256448473e-03, 1.343301928917748e-02, 4.824616568192324e-03, 6.126070420962292e-03, 1.016183306947094e-02, 1.275160901060998e-02, 2.192982162407318e-02, 2.099297572786487e-02, 4.426139908156154e-03, 6.023357790297975e-03, 1.093667157588836e-02, 1.282523855091218e-02, 9.684249970725881e-03, 4.607232979861647e-03, 6.611445723147648e-03, 6.160059158190738e-03, 6.409167564992368e-03, 2.293311713595484e-02, 1.193330754399362e-02, 6.798734852378725e-03, 9.961739999056352e-03, 8.894448791351831e-03, 3.597511748367512e-02, 8.326256930495218e-03, 1.184595813888184e-02, 2.667221349104443e-02, 5.629467514415886e-03, 6.011950798641157e-03, 1.511385124119533e-02, 5.958553382416767e-03, 7.963243106813657e-03, 1.598354877539745e-02, 1.689976812976589e-02, 7.235440810695985e-03, 1.151100025424639e-02, 9.981544846279078e-03, 9.899225753674763e-03, 1.661113151088878e-02, 4.119524224597918e-03, 9.538452774949937e-03, 8.243342043508642e-03, 1.290574747530167e-02, 2.696700779028923e-02, 2.197593591408497e-02, 8.799095163705983e-03, 7.042210545787105e-03, 2.402514056328667e-03, 1.352151040351170e-02, 7.457342483577483e-03, 1.095612523508382e-02, 1.901340801932340e-02, 9.166589743178332e-03, 6.277493857013923e-03, 1.101338323949057e-02, 1.060134485117650e-02, 1.411319988430442e-02, 7.388931082560509e-03, 8.763548305858914e-03, 1.223193627632088e-02, 1.918563930916220e-02, 5.833084256379647e-03, 6.703816521163152e-03, 1.290658332129250e-02, 9.364659401980804e-03, 8.787843785770921e-03, 8.747460130956172e-03, 6.085657312254072e-03, 5.087204807157566e-03, 1.635370255754376e-02, 4.180825097218461e-03, 5.116094392710011e-03, 1.520264149142276e-02, 1.079224754901669e-02, 1.968874163154489e-02, 1.732937074773867e-02, 5.312092609748289e-03, 1.732735630575092e-02, 4.606241430833872e-03, 3.886307633864701e-03, 6.102764796826870e-03, 7.449543301619015e-03, 3.699001317589832e-03, 9.139320654885362e-03, 6.523845871201103e-03, 1.027810920693931e-02, 5.274373580139160e-03, 2.117490004359796e-02, 7.048744314455374e-03, 1.672501098807011e-02, 8.086993263066625e-03, 7.283940278536465e-03, 1.064499407722965e-02, 5.127007331637365e-03, 1.094377572007111e-02, 7.696766883897492e-03, 1.461439038976148e-02, 4.069808698235643e-03, 1.740012556863754e-02, 1.347900363684170e-02, 1.679263343401732e-02, 1.358479217374424e-02, 2.230331735654261e-02, 4.122444900960353e-03, 1.350522613012477e-02, 1.429557324797377e-02, 5.717762985502010e-03, 9.188969612553758e-03, 1.794197921756863e-02, 7.329093480834359e-03, 1.020420264921825e-02, 1.006500604177207e-02, 4.568720644988968e-03, 2.050477551260093e-02, 1.130414554421919e-02, 6.641322428012218e-03, 5.110875724671927e-03, 1.989214931626372e-02, 2.476112565176937e-02, 4.146811069774481e-03, 5.414406493001204e-03, 6.548718727508607e-03, 6.438003104123883e-03, 3.896989410913729e-03, 4.544494601315249e-03, 9.614894330385551e-03, 1.491299255315972e-02, 7.999647052187689e-03, 1.028692138722226e-02, 6.396443546170684e-03, 2.334044282524046e-03, 1.204019493075244e-02, 6.445835688537593e-03, 7.474128021028576e-03, 1.119272212726757e-02, 1.195832248901489e-02, 1.271335178366267e-02, 6.458188968862974e-03, 1.488341907129263e-02, 7.481889349963983e-03, 1.505134530101992e-02, 1.488753354525304e-02, 8.687848838024955e-03, 1.519251739805572e-02, 6.023731641298154e-03, 1.760911970034855e-02, 7.356942701147601e-03, 1.142269770844436e-02, 6.317610901615240e-03, 1.061550198428015e-02, 7.687460729061759e-03, 4.835269841168533e-03, 4.068657198245959e-03, 6.516260715372362e-03, 1.655995039325913e-02, 4.988467273214533e-03, 3.708896450639866e-03, 4.931176371278487e-03, 6.280591532263991e-03, 7.172300890542375e-03, 6.525914963745558e-03, 5.826354767776779e-03, 5.772205327887232e-03, 8.705553720929435e-03, 9.935839137959725e-03, 5.687109823773659e-03, 1.461725506142932e-02, 3.888145315103614e-03, 1.064543927109427e-02, 5.871543904694907e-03, 9.849817050964870e-03, 9.383645401868481e-03, 1.130387244155234e-02, 4.509704106554617e-03, 1.405796826484286e-02, 7.190737041895049e-03, 5.691087898095704e-03, 2.197357326953629e-02, 1.728298176419155e-02, 1.159483788883222e-02, 1.110154031464629e-02, 8.869311464857794e-03, 2.611210761628962e-03, 6.205228362789183e-03, 5.603257611683388e-03, 1.507403477607378e-02, 1.781104557453395e-02, 4.756981096110167e-03, 1.760001567548429e-02, 1.382787299834581e-02, 6.458613687792953e-03, 1.499940121691762e-02, 6.130810231529922e-03, 6.174838912075115e-03, 8.387773532515935e-03, 1.341399447116820e-02, 1.621341639177487e-02, 3.569584735194479e-03, 1.275052776694117e-02, 1.003985439102921e-02, 8.576924232668497e-03, 1.421225694903475e-02, 2.003356331927009e-02, 1.116546184989486e-02, 5.671422237426258e-03, 1.440332119192485e-02, 9.099902671697569e-03, 6.388626894392133e-03, 4.140480315620304e-03, 1.719250928761154e-02, 9.384473487907798e-03, 7.128303768812713e-03, 1.121750380530893e-02, 3.489243294621494e-03, 3.758126558204296e-03, 1.411479856911495e-02, 3.748678362625224e-03, 2.867440045034400e-03, 1.669379317466918e-02, 4.993920731936301e-03, 6.516405310535087e-03, 7.038139280474915e-03, 5.683302655965297e-03, 6.256826452916640e-03, 1.676035622259537e-02, 4.519104974393564e-03, 8.491438924630309e-03, 1.565507334528229e-02, 5.025683891264321e-03, 1.057348761235859e-02, 5.850795151611460e-03, 3.984299213578026e-03, 2.138684329426256e-02, 1.602226059820451e-02, 4.573063242171224e-03, 1.181525010303272e-02, 4.739139305427660e-03, 1.016226680670360e-02, 1.573699929662862e-02, 1.728393066346154e-02, 7.239123854268341e-03, 1.237918821533713e-02, 1.313687737897798e-02, 2.267207988937117e-03, 2.209249906721801e-02, 1.875330052790400e-02, 9.446910186574474e-03, 5.637856568931883e-03, 1.105683037088486e-02, 6.624469634620701e-03, 1.966467865325651e-02, 6.446316151882786e-03, 1.282395257068551e-02, 4.403507191333511e-03, 6.728892307481159e-03, 1.039119489884953e-02, 1.112404353908967e-02, 2.957233546720700e-03, 1.349908445935688e-02, 2.725945378864807e-02, 4.181809125026868e-03, 8.994215508175486e-03, 5.509880819335780e-03, 5.879606453711750e-03, 1.747677190324654e-02, 2.591663475113270e-03, 1.319825522988495e-02, 9.110363183682977e-03, 1.433919436793016e-02, 4.462291777949979e-03, 6.324589616048141e-03, 1.973421027036467e-02, 8.053210984711481e-03, 4.059688850798686e-03, 2.694886060903353e-02, 1.347355889129161e-02, 4.747594053668404e-03, 2.023364344854730e-02, 4.452464527245404e-03, 3.462165630986470e-03, 9.665097114071276e-03, 7.435210720133575e-03, 3.323753205423446e-03, 1.976630001847180e-02, 7.196426483596621e-03, 1.483911473677746e-02, 3.100629557646508e-03, 5.671298069870653e-03, 7.292950141139837e-03, 1.575545850823740e-02, 5.678166775199024e-03, 1.726785620912690e-02, 4.544895048403051e-03, 3.340938746799488e-03, 6.477536267047048e-03, 3.098755339871407e-02, 6.189005796354460e-03, 3.154038470206495e-03, 5.259989454774272e-03, 5.895805601494118e-03, 6.730278535744483e-03, 3.093872988890652e-03, 7.538152582251999e-03, 9.199982976007761e-03, 1.658178962859384e-02, 3.206007446222777e-03, 9.694624360518732e-03, 3.355828554983452e-03, 7.742496335419144e-03, 1.293433756041602e-02, 6.836679375970632e-03, 1.643721587968224e-02, 8.576670723318403e-03, 4.853943877890000e-03, 2.940488589567281e-03, 8.275894741173221e-03, 5.001830438602326e-03, 7.903698126184810e-03, 1.441692288451887e-02, 2.663691996968450e-02, 8.733127413727870e-03, 3.455445907304153e-03, 4.607895271287705e-03, 1.220799737818410e-02, 1.114544340998803e-02, 1.903404025231355e-02, 1.701333932990515e-02, 1.294100001807079e-02, 6.965496677894289e-03, 4.879079558604298e-03, 1.123982272531178e-02, 7.906166639517521e-03, 9.751440146711067e-03, 1.934809336076853e-02, 3.721994626383067e-03, 9.340419345643322e-03, 1.284973928760350e-02, 4.956487068388736e-03, 3.145091078704262e-02, 1.012245884424677e-02, 2.028357088905881e-03, 5.569483447099208e-03, 1.914763373213204e-02, 1.156791236121851e-02, 1.306259455385976e-02, 1.655646712556005e-02, 1.260142313680503e-02, 8.357950240770740e-03, 1.506340541405400e-02, 8.332549693932163e-03, 1.587807165475990e-02, 6.878178071859527e-03, 1.412243997331706e-02, 3.120827462689659e-03, 4.398965717688725e-03, 8.259311711002776e-03, 7.233358143435533e-03, 5.197428325430436e-03, 3.622322955787684e-03, 1.167081361619065e-02, 8.714380910005464e-03, 1.095600751311185e-02, 1.191738523062804e-02, 9.140168507751782e-03, 1.001757744545015e-02, 8.506397686420130e-03, 9.722282928596067e-03, 1.297432464697304e-02, 7.219434988481112e-03, 9.209020493862668e-03, 9.921322879963980e-03, 9.980818531603406e-03, 9.630079829728905e-03, 3.357846252876025e-03, 4.768054758776315e-03, 3.259840360886906e-03, 4.409137719927759e-03, 5.062599086232165e-03, 1.942227734980435e-02, 5.674463207405933e-03, 7.884803479958581e-03, 5.360956620856395e-03, 1.805022920602861e-02, 7.987066415636708e-03, 1.680737847607147e-02, 1.478096936036022e-02, 1.820944601761959e-02, 7.207940293072723e-03, 1.512972995825766e-02, 9.166210341575469e-03, 7.059270261528239e-03, 2.116482899034370e-02, 8.670981454938763e-03, 2.605180939800998e-03, 1.593745049114080e-02, 1.362546652383223e-02, 9.218258363001081e-03, 2.600280591580007e-02, 1.597239375528287e-02, 4.814368024894578e-03, 4.137417121779333e-03, 2.369807341400906e-02, 5.401662681065584e-03, 3.726730857733407e-03, 4.308931501541972e-03, 2.141284811371815e-03, 4.424706992891558e-03, 1.888610797157101e-02, 7.782497557358994e-03, 1.021195947926605e-02, 7.437711237717557e-03, 2.523700443292790e-02, 1.773852040988353e-02, 1.156557441230671e-02, 1.092047649102799e-02, 4.826404742901173e-03, 1.282175608955752e-02, 4.790583884113291e-03, 1.142753478368318e-02, 4.426729728118445e-03, 1.158422704223720e-02, 3.391209202187078e-03, 1.001473689263108e-02, 1.252916069798864e-02, 5.707912666560084e-03, 5.629698199515239e-03, 4.927916773899804e-03, 2.169715805472160e-02, 3.715714448488668e-03, 8.045549786903519e-03, 1.546729002763469e-02, 6.965327607776959e-03, 5.538504405056838e-03, 1.095732773520534e-02, 9.006051265355357e-03, 1.201673483291108e-02, 4.746447842118431e-03, 7.476636515874058e-03, 1.194050127079178e-02, 3.869414496336868e-03, 1.038364586563757e-02, 1.949216823744920e-02, 2.802352911302194e-03, 6.674437992677161e-03, 9.164672302372770e-03, 1.368656791010638e-02, 1.245226455698920e-02, 8.931057366325245e-03, 2.645348949013631e-02, 1.140304388767219e-02, 1.181810911410838e-02, 9.559808289704767e-03, 6.009400137965184e-03, 8.855551531061842e-03, 9.364459098493930e-03, 7.208951196484144e-03, 5.995990619327212e-03, 4.087774342848200e-03, 7.722198608574949e-03, 3.514327962816314e-03, 2.719949115082328e-03, 3.799799211615422e-03, 1.249391148822183e-02, 1.804161254317347e-02, 1.539981721720789e-02, 1.189408820722303e-02, 4.289544231141862e-03, 1.910956185888519e-02, 1.704378567732023e-02, 7.588997625015320e-03, 4.210915331565813e-03, 9.948942749419785e-03, 4.522244470418236e-03, 1.721270819147026e-02, 1.173704645987501e-02, 1.416153656454080e-02, 1.534160583396816e-02, 2.422125216099242e-02, 4.797956131955937e-03, 4.069220168618811e-03, 9.422798111639999e-03, 2.028998394491706e-02, 1.245379060824355e-02, 1.161505980795576e-02, 8.639466485853358e-03, 1.231161436754279e-02, 3.316410115029357e-03, 1.200136008818763e-02, 5.612001898645526e-03, 2.709369485238030e-03, 4.340466823808282e-03, 4.301468602838359e-03, 5.478537849657012e-03, 9.080815700793573e-03, 4.364229164302042e-03, 1.823833038292389e-02, 1.413121406949619e-02, 4.959126374328783e-03, 5.137828078312110e-03, 2.572904296751414e-03, 1.642441050581690e-02, 6.635655519564384e-03, 4.218147581653144e-03, 5.204736088014660e-03, 8.441829780059962e-03, 1.062848484610767e-02, 4.486892480578594e-03, 1.529348692357458e-02, 6.237522671111762e-03, 5.635577822127943e-03, 7.554537320099164e-03, 1.197361491091402e-02, 4.862242298365831e-03, 1.530871833985011e-02, 7.567369930466009e-03, 1.101143384880855e-02, 7.117439480370834e-03, 1.070163568998548e-02, 1.960805774161242e-02, 4.588556469126279e-03, 5.903489520831634e-03, 3.830759807537656e-03, 6.988218706165199e-03, 4.728533024271612e-03, 7.512303723186145e-03, 2.645965521447284e-03, 1.005686566289949e-02, 9.783513324651339e-03, 8.174372374811903e-03, 4.722325133522246e-03, 1.982750250957463e-02, 1.394287352982957e-02, 6.358859659933805e-03, 1.420028161367211e-02, 1.363674651345437e-02, 5.123258265855800e-03, 5.189340494313341e-03, 1.224703273624886e-02, 1.721809181224706e-02, 1.434459573817524e-02, 1.825237094931921e-02, 4.389548118370903e-03, 1.251815275438873e-02, 7.522691202944525e-03, 3.943201321351145e-03, 1.680278190512353e-02, 1.126358336824531e-02, 8.316684183262020e-03, 7.345660863650006e-03, 6.107609910077845e-03, 6.897900139854788e-03, 4.222879833326307e-03, 8.398204237430228e-03, 5.139730219664405e-03, 3.629694178220439e-03, 1.020910412741929e-02, 6.937754681019741e-03, 5.409904746914019e-03, 6.729290729458438e-03, 5.001790748294701e-03, 7.958182602052338e-03, 6.525476908766046e-03, 1.086230532147533e-02, 2.807944661003118e-03, 2.903694607422896e-03, 6.500371408147143e-03, 6.105055012434349e-03, 9.635567735442184e-03, 1.445606463129663e-02, 4.709589356664204e-03, 3.932691125564940e-03, 6.092865081458927e-03, 1.199231445848274e-03, 1.135050019900249e-02, 2.291260584460265e-02, 8.751298000620904e-03, 8.630839418861827e-03, 9.890734954108089e-03, 7.969423507816953e-03, 9.688014176662540e-03, 3.549489617946149e-03, 3.575854148394263e-03, 1.555159947336393e-02, 9.856661305616080e-03, 3.969731223372553e-03, 1.291008129123616e-02, 1.032123350492377e-02, 1.390510455226740e-02, 7.786449416304672e-03, 7.618330116513345e-03, 1.571762746589845e-02, 1.639318127870875e-02, 1.533598667118888e-02, 4.348876394391825e-03, 1.179716422339118e-02, 1.067015666099173e-02, 7.942401459001370e-03, 7.274555208298583e-03, 1.145561676968113e-02, 3.260752693792693e-03, 6.615446481456053e-03, 2.425466112420100e-03, 1.952532913070507e-02, 4.747051873878283e-03, 9.204045820389651e-03, 2.241518617449136e-02, 1.794421097119565e-02, 1.250341335243789e-02, 2.374801127104159e-02, 1.414024138523047e-02, 6.930293232851708e-03, 9.243516198066180e-03, 1.723318029154976e-02, 1.642846792204304e-02, 7.871788881234248e-03, 6.745584109513117e-03, 1.290123626679065e-02, 4.598524816372489e-03, 5.138568561720668e-03, 3.442177410708458e-03, 1.282190925604578e-02, 4.401906862352215e-03, 1.239161300208881e-02, 4.065739379496048e-03, 7.359998411970930e-03, 1.448879508032550e-02, 5.807714015276495e-03, 7.027792920953835e-03, 1.142492816706148e-02, 2.805869454461827e-02, 5.077937717825568e-03, 9.202422403285358e-03, 1.177825347290015e-02, 3.188992625077317e-03, 8.606101205319508e-03, 4.669301148024742e-03, 6.811375150434089e-03, 1.255695265199086e-02, 7.833499271074282e-03, 1.346803943707964e-02, 2.025318786227956e-02, 4.355536976685812e-03, 1.122679542286970e-02, 3.819282259919191e-03, 3.643041911066004e-03, 7.851856470515579e-03, 1.567556101981373e-02, 9.762121828647838e-03, 1.028831416154326e-02, 6.054628091802990e-03, 4.298223823094621e-03, 9.006246478868022e-03, 1.725197731519501e-02, 3.482422493538621e-03, 4.384255845092847e-03, 8.732811966975132e-03, 3.908154465878696e-03, 7.914994352660656e-03, 1.266772819260107e-02, 2.856732174781551e-03, 1.171000121170889e-02, 1.395167349287284e-02, 3.262987696389361e-02, 6.307329394611938e-03, 8.592422923400577e-03, 1.058467440788733e-02, 5.773858590843069e-03, 1.049509590412737e-02, 1.043111747039284e-02, 1.108092133087827e-02, 5.862650599602545e-03, 2.119544648855641e-02, 9.188553263205458e-03, 1.202199089231778e-02, 1.823708374646775e-02, 5.373116534981938e-03, 6.020872512129003e-03, 5.840533101559648e-03, 2.684443390832828e-03, 1.728390457761062e-02, 1.253416894540145e-02, 1.663159018995207e-02, 1.620657411884185e-02, 2.632433285977085e-03, 2.883420792342651e-03, 6.763220869950662e-03, 9.967067070713775e-03, 1.198199060804645e-02, 4.850803291263426e-03, 8.364311870672438e-03, 1.584545034771035e-02, 5.840335669161657e-03, 9.547100775166090e-03, 7.888728830148439e-03, 2.037009043228885e-02, 6.178043286674584e-03, 3.626791222781932e-03, 4.504502626914953e-03, 5.245272225253121e-03, 6.083939427500605e-03, 5.871286388819020e-03, 5.224022006321483e-03, 9.860674385055909e-03, 6.726957115464705e-03, 1.554741566161538e-02, 3.095855025432073e-03, 8.148198118776621e-03, 2.897976570507865e-03, 4.988507486188394e-03, 3.989903293742611e-03, 2.103315782980076e-02, 3.885982581315473e-03, 1.567932860107673e-02, 7.881519023215813e-03, 5.134438540858530e-03, 1.042752571514668e-02, 1.547539391819063e-02, 4.540255978287808e-03, 2.521929936729746e-02, 4.953458240433662e-03, 6.460722705131657e-03, 8.005286618555228e-03, 7.041111061734519e-03, 1.183568388840055e-02, 5.553153198827970e-03, 1.343615575622300e-02, 4.569139826083903e-03, 8.891515110231674e-03, 1.210453612790355e-02, 1.009488184197152e-02, 6.547889367441781e-03, 1.260770946596827e-02, 1.422614461113892e-02, 1.197005005576411e-02, 4.467133845628434e-03, 4.017732378250754e-03, 2.474838424914850e-02, 2.671486133212977e-03, 3.228984709514441e-03, 1.015437207777756e-02, 3.370341281317394e-03, 8.452783743927250e-03, 3.437440831990630e-03, 8.594043130936797e-03, 5.483785735687322e-03, 5.037554445168680e-03, 1.456429872886173e-02, 1.687739092789422e-02, 1.659899889923321e-02, 1.504778687962637e-02, 5.594745306095360e-03, 2.775493171029565e-02, 4.778411456280325e-03, 4.151935091956697e-03, 8.100761135318149e-03, 3.663307127850875e-03, 8.067923983189682e-03, 5.676260900853506e-03, 9.479395661642007e-03, 1.435676964699565e-02, 5.289886819469436e-03, 1.378374990567087e-02, 4.808861176264196e-03, 1.820206518321456e-02, 1.848061846965954e-02, 2.325629247606101e-02, 4.183388420441023e-03, 3.817899542327282e-03, 5.029893569930523e-03, 4.028537374520679e-03, 3.318919116770225e-03, 1.481824447139185e-02, 3.325485481410055e-03, 3.037412684582633e-03, 1.228725586611400e-02, 3.612477793319898e-03, 7.234321468619668e-03, 8.670956276575922e-03, 2.915284518930312e-03, 4.991766641891172e-03, 3.486373386901437e-03, 4.891057800510710e-03, 4.021003982345788e-03, 1.980500052263924e-02, 3.889925323975569e-03, 1.233683264993525e-02, 9.078490074030875e-03, 2.418078650623670e-02, 5.288404684108796e-03, 5.204583239151368e-03, 1.049937880255213e-02, 1.554870272377288e-02, 5.354032808308888e-03, 8.858220742679326e-03, 2.866141988630853e-03, 1.013765892285454e-02, 3.325411568797078e-03, 6.454175901583981e-03, 1.268167390150570e-02, 7.285496748950972e-03, 5.610397678318084e-03, 8.257007126915855e-03, 8.728849159661569e-03, 1.129825164792051e-02, 6.919405087780777e-03, 1.216947624185524e-02, 2.824137181473538e-03, 2.257105345092532e-03, 1.883196719345833e-02, 1.344509028452611e-02, 5.051963438403540e-03, 6.925530426564648e-03, 3.245991486811968e-03, 2.009503460714779e-03, 4.223446082570519e-03, 9.642550666269711e-03, 9.155070046854693e-03, 2.919979459030043e-03, 6.466258014655442e-03, 3.952434772665474e-03, 1.208607379298088e-02, 5.851263453551652e-03, 7.228958868114995e-03, 5.546952816588722e-03, 3.264632243697351e-03, 1.348970229025210e-02, 6.714698719464532e-03, 3.745958003454271e-03, 1.670153693778503e-02, 7.420335860114029e-03, 1.251241242739122e-02, 3.969903868689191e-03, 2.388743239152665e-03, 5.467951588192990e-03, 1.685638736295249e-02, 9.329048070115057e-03, 1.086793707804744e-02, 1.071609306575920e-02, 5.717563662807348e-03, 1.657402840443837e-02, 5.175058837132889e-03, 3.536261569476896e-03, 9.553218525618638e-03, 1.311816689846147e-02, 1.255485948956986e-02, 5.862401593085397e-03, 1.300066856809032e-02, 1.028898555965408e-02, 1.483624276578817e-02, 1.140016329816370e-02, 4.657021023258223e-03, 8.192109061010250e-03, 5.965040398746985e-03, 4.777496686887743e-03, 7.370358439423236e-03, 3.814214720979086e-03, 1.454072775501729e-03, 3.394905432824020e-03, 5.413424008403479e-03, 8.694218451408898e-03, 7.068093932274313e-03, 1.299155365799446e-02, 3.755246721294224e-03, 3.587210815335272e-03, 3.756445051585606e-03, 2.146612655450113e-02, 8.387697415902746e-03, 4.442619198165141e-03, 8.026447806306085e-03, 1.041643310820135e-02, 4.687369090830607e-03, 1.110853090165007e-02, 1.502732112732445e-02, 7.488657801270674e-03, 4.923285347249176e-03, 2.648104303320338e-03, 3.285365627701839e-03, 1.478809346444946e-02, 4.333461561359491e-03, 3.414003980331242e-03, 2.658718539890293e-03, 3.715225573289588e-03, 1.351760149739614e-02, 1.057318719561956e-02, 7.042986280557349e-03, 6.688207332260023e-03, 9.242479928666886e-03, 1.697645488609565e-02, 3.635599958328681e-03, 6.504682493927743e-03, 3.563624285275981e-03, 3.699688954984883e-03, 1.315769874291658e-02, 2.279271752536878e-03, 9.019542950263536e-03, 4.158995113557693e-03, 1.030761908341059e-02, 5.148347280536801e-03, 4.060666226715589e-03, 1.571929927646367e-02, 6.938437860606404e-03, 9.995304855541509e-03, 3.333537818931562e-03, 4.782228350407864e-03, 4.978866077138587e-03, 4.825758244694386e-03, 1.986402358228846e-02, 4.061407499565782e-03, 2.171602749353887e-03, 1.162935977065835e-02, 9.562725923188070e-03, 1.358884200886077e-02, 4.854768306389735e-03, 1.630366453734816e-02, 5.295643806411384e-03, 7.778092458348203e-03, 7.792190319481793e-03, 1.179505970411889e-02, 2.199538044946628e-03, 4.733779748416335e-03, 5.118260706377460e-03, 1.818689847499115e-03, 1.911468807572063e-03, 8.048439433650001e-03, 1.169996999064981e-02, 1.367356845265794e-02, 5.046535841642838e-03, 3.136125612987520e-02, 6.073464500373575e-03, 2.455015568669631e-03, 5.160060807815078e-03, 2.823982570213033e-03, 4.620418052708792e-03, 7.259013021218428e-03, 7.857237371972168e-03, 2.191770722177693e-03, 6.161821428869079e-03, 1.855299681289539e-02, 6.012725668947927e-03, 8.325364679699342e-03, 4.742670312547203e-03, 5.656866214620293e-03, 5.705514144945434e-03, 4.319826566135510e-03, 6.571411249697089e-03, 1.219611910216025e-02, 3.931397760127729e-03, 4.292946657155816e-03, 6.970574112894732e-03, 6.130921671907081e-03, 2.140528865688890e-03, 5.389775533514037e-03, 4.260016683097397e-03, 5.043397545842830e-03, 1.243452693238972e-02, 3.015665629376002e-03, 6.772670187360992e-03, 4.089376337548911e-03, 6.541214236979304e-03, 2.062348562696183e-02, 6.263024297330577e-03, 5.175763574554214e-03, 5.606075130539560e-03, 8.461268425818154e-03, 5.242985536017510e-03, 1.124613591768532e-02, 5.825578930264114e-03, 7.878328018651638e-03, 1.462876890475944e-02, 3.514542847587762e-03, 1.466784157507057e-02, 6.668381548409754e-03, 2.318610084991486e-02, 5.682099754470734e-03, 3.188068444001061e-03, 4.326770036912599e-03, 2.773328665224552e-03, 4.162498151712196e-03, 7.333945744386580e-03, 3.770678929922482e-03, 3.184611748280702e-03, 1.496907377043235e-02, 9.246947705953659e-03, 1.833750570773023e-02, 3.581733185401395e-03, 4.407664027598455e-03, 1.756791526509135e-02, 2.082965217993144e-02, 1.444560083886615e-02, 1.241209086735427e-02, 4.369956244914192e-03, 3.498879142530282e-03, 1.306796312546576e-02, 1.826418357287786e-03, 1.235223545509952e-02, 1.056301293848728e-02, 4.909745249120857e-03, 7.380383006131703e-03, 1.898943997987748e-02, 7.716401945243593e-03, 8.615541749962406e-03, 3.977381566264554e-03, 4.962466498868341e-03, 2.269432464724943e-02, 8.397388685643539e-03, 4.869546300092066e-03, 3.259554277739465e-03, 3.916907391053226e-03, 5.740749530882464e-03, 1.730935162776054e-02, 6.034864507152722e-03, 4.397714327039501e-03, 4.768729066922489e-03, 8.777164508156129e-03, 1.134320955683774e-02, 9.177847835902917e-03, 4.224839032778882e-03, 7.084883802604721e-03, 6.151804899314486e-03, 9.569882713584025e-03, 1.267038398983807e-02, 6.517136461680587e-03, 7.700225143051380e-03, 5.743353799231667e-03, 1.143897463680786e-02, 1.027338292674680e-02, 1.634067868698063e-02, 8.723144072438866e-03, 8.440399031927677e-03, 4.577387588083901e-03, 1.048530837944976e-02, 3.248490769685761e-03, 8.754246193703687e-03, 1.302820628786705e-02, 7.864748023482313e-03, 8.140902038424346e-03, 6.372216757866023e-03, 8.773955233195609e-03, 6.427652228742494e-03, 1.262584121172305e-02, 7.439726209791141e-03, 4.478204246709578e-03, 4.177352825094220e-03, 3.260812784049555e-03, 3.184281444715144e-03, 2.685651689094005e-03, 2.964813421053657e-03, 3.799365791805055e-03, 8.686928973310500e-03, 8.842701875447705e-03, 3.997919828439241e-03, 3.772037202528915e-03, 1.245562165407009e-02, 1.303845375105235e-02, 9.115290764423736e-03, 3.517244607120034e-03, 4.407995355151731e-03, 4.647269680407570e-03, 4.670798404507653e-03, 4.842159192021181e-03, 3.766746885131464e-03, 1.158849712189368e-02, 3.707104999208800e-03, 2.649172558696170e-03, 4.464127917191801e-03, 6.327792768114805e-03, 2.338019670103258e-03, 5.633122040486094e-03, 1.216980025001115e-02, 9.851315204499264e-03, 7.073937685157209e-03, 1.078302962952583e-02, 1.617480800380480e-02, 3.672799928333414e-03, 3.998223470600505e-03, 1.016000915621965e-02, 1.542840402894240e-02, 5.837977697056498e-03, 2.278254652157801e-02, 1.188484044206267e-02, 4.115985372075832e-03, 3.682242543692552e-03, 9.006280886079774e-03, 6.865213885341425e-03, 7.407083696171438e-03, 2.123743137357743e-02, 4.497534809145717e-03, 2.132753757394106e-03, 9.198955562314761e-03, 4.541836436273569e-03, 1.289063616581002e-02, 2.944983043449075e-03, 1.128655927548099e-02, 4.959513351259978e-03, 4.623674720521508e-03, 3.908568753661774e-03, 2.545996904130149e-03, 1.219349712857638e-02, 4.440606446650845e-03, 9.542097975191075e-03, 3.083296670034711e-03, 2.217000075748120e-02, 5.954758351709550e-03, 3.430205101157460e-03, 4.702738452461990e-03, 5.509407971987314e-03, 3.930134890148736e-03, 1.434205506870002e-02, 7.995078172742264e-03, 5.650309761592589e-03, 3.591432541213640e-03, 7.056568677411349e-03, 4.894337447647226e-03, 1.098224119238790e-02, 3.043425301440318e-03, 1.510229986177503e-02, 1.560625917546350e-02, 3.460873793658227e-03, 5.223279165825102e-03, 1.326702781003516e-02, 6.987448782929419e-03, 4.686189696921614e-03, 3.941640864293851e-03, 4.606965918655513e-03, 7.262472048458888e-03, 2.886615462909715e-03, 3.005029867700329e-03, 3.330770900753484e-03, 1.206025856644065e-02, 5.953527714366011e-03, 8.592482079338187e-03, 2.474071957087588e-03, 4.430769958963254e-03, 6.335259610849481e-03, 4.127399967587041e-03, 7.624174702831740e-03, 4.922863810168309e-03, 2.979394175242083e-03, 7.930792844200172e-03, 1.893478947317649e-03, 9.036824951153866e-03, 7.875988164900464e-03, 1.348361842596101e-02, 4.641365860444074e-03, 5.412922871989446e-03, 1.226550014928465e-02, 2.945967334156979e-03, 1.589067096401874e-02, 1.365747576438808e-02, 5.313467721052854e-03, 2.175437807939919e-03, 9.067417877192625e-03, 5.805145769338069e-03, 1.558589453673565e-03, 4.786784892709807e-03, 4.793887787961014e-03, 1.855196264386739e-02, 1.372548426619726e-02, 3.058446981938460e-03, 7.212216878924920e-03, 8.180139438446336e-03, 9.296990205864549e-03, 9.194383962975198e-03, 1.620079955575523e-02, 1.583223821730036e-02, 8.073475219880348e-03, 4.880282135981105e-03, 2.041501729905121e-02, 8.671376463625100e-03, 3.454021344929973e-03, 3.545924470326782e-03, 1.195123027713198e-02, 2.975252066117781e-03, 3.988175259088528e-03, 1.152498174474561e-02, 3.531728640037619e-03, 5.335719386774072e-03, 1.266379565870221e-02, 3.591439687417566e-03};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, int>*> matrices = pwm::get_all_matrices<double, int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->powerIteration(x, y, 100);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(x[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(powerIteration_input_unsigned)

BOOST_AUTO_TEST_CASE(powerIteration_arc130_unsigned, * boost::unit_test::tolerance(std::pow(10, -12))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromMM("Test_input/arc130.mtx", true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {2.492724633018974e-05, -2.390029079751346e-05,  9.572440154285601e-11, -1.109479628632532e-11,  1.715107887135334e-13,  3.217882304082448e-13, -1.103385548634800e-14,  3.804972004156662e-15,  1.882468120622790e-14,  1.140532528010935e-14, -4.594905476337396e-09, -2.320827044723591e-13,  1.882468120622791e-14,  3.063003439297170e-14, -7.616237553357624e-14,  9.144373928721132e-43,  3.804972004156651e-15, -2.552141537821988e-12, -3.614444536730160e-15,  2.345394485375163e-05, -9.999999988276607e-01,  2.413916021070737e-06, -1.502618542048214e-07,  6.580273154716977e-20,  6.631828979854100e-21,  1.505217311193943e-18, -2.908108657714851e-17,  2.023037754317203e-22, -1.083417245222760e-25, -1.179250234161811e-26,  3.232387725635387e-08, -4.253028950103695e-14,  3.500727758463204e-18, -2.461158769088564e-25, -2.371662405296508e-26,  2.441597623040829e-05, -9.709691231986644e-12,  3.158497694918372e-14, -3.405279088750418e-25, -3.170354596220193e-26,  9.613918117342152e-08, -4.725999046775580e-11,  3.068545850069518e-12, -3.572140791950370e-25, -3.379215405504973e-26,  1.241625888841511e-13, -4.874748886745859e-12,  9.112121257184283e-13, -3.069491249112258e-25, -3.049410847276142e-26,  5.983033908266379e-19, -4.417361316865787e-14,  3.067671212294626e-15, -2.232127347602557e-25, -2.392621564417478e-26,  2.906737113546671e-19, -2.383116132109114e-16,  1.569211620952665e-18, -1.375234202085984e-25, -1.652061731301824e-26,  1.446550408766568e-19, -3.363870499144852e-18,  1.423922154806218e-21, -6.985855466232769e-26, -1.012985515704650e-26,  6.906566290005820e-20, -1.775352932370874e-19,  9.989737052140664e-24, -2.797138906980411e-26, -5.598427441933988e-27,  3.043238914248902e-20, -1.863352857380007e-20,  5.058331373195670e-25, -8.822788286630944e-27, -2.835705943917218e-27,  1.215604059972376e-20, -2.306664397097668e-21,  6.387263749122422e-26, -2.492666863481531e-27, -1.325242311424826e-27,  4.421046919925564e-21, -2.708778096203366e-22,  1.191369106005722e-26, -7.641908724116118e-28, -5.702200070880650e-28,  1.470438915185142e-21, -2.762550553171631e-23,  2.826480477014610e-27, -2.666214528287778e-28, -2.248519241544640e-28,  4.450576621929338e-22, -2.358631566905962e-24,  7.512050477594792e-28, -9.591616969540117e-29, -8.099239148449887e-29,  1.219136530295899e-22, -1.664052789972254e-25,  1.988899583820249e-28, -3.266229613456442e-29, -2.660296808107736e-29,  3.016669594564926e-23, -9.809816746503891e-27,  4.917391644914019e-29, -1.016476204363154e-29, -7.963685200252959e-30,  6.737259576708041e-24, -5.198926435409626e-28,  1.106465704700631e-29, -2.862493410156643e-30, -2.171746248176351e-30,  1.358528192832975e-24, -3.286162656589790e-29,  2.245307575584594e-30, -7.283612954709367e-31, -5.397250090223691e-31,  2.474209551260810e-25, -3.556879472566343e-30,  4.094532802665354e-31, -1.675059552087905e-31, -1.222350384316561e-31,  4.069920466191034e-26, -5.371192394150234e-31,  6.692700063432779e-32, -3.484628829395268e-32, -2.523009568753440e-32,  6.051792861149525e-27, -8.243952012206658e-32,  9.774577391985403e-33, -6.561899876147630e-33, -4.747971448455573e-33};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->powerIteration(x, y, 100);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(x[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_CASE(powerIteration_G38_unsigned, * boost::unit_test::tolerance(std::pow(10, -12))) {
    pwm::Triplet<double, unsigned int> input_mat;
    input_mat.loadFromMM("Test_input/G38.mtx", false, true, false);
    int mat_size = input_mat.col_size;

    // Precomputed solution using matlab
    double real_sol[] = {7.018755101878695e-02, 2.442001685069157e-01, 1.791359066672807e-01, 3.155949487683005e-01, 2.239056338769425e-01, 1.699052944759452e-01, 1.469505494265476e-01, 1.304238524328237e-01, 1.354862594698490e-01, 1.280247882912866e-01, 1.379233202194056e-01, 1.020449086249243e-01, 7.724223589720020e-02, 1.224806824279476e-01, 7.442480756395499e-02, 9.771152071110686e-02, 6.099656085764610e-02, 1.464501129358039e-01, 5.996364706836041e-02, 5.717873966627790e-02, 5.448399019488614e-02, 5.139861013146822e-02, 7.375157892571758e-02, 4.127820310762707e-02, 5.057927391000699e-02, 4.731987228068461e-02, 1.024524537397698e-01, 9.802644140930790e-02, 5.099584306032862e-02, 4.177511021607015e-02, 5.939217513674671e-02, 6.159888980898130e-02, 5.222544787889316e-02, 4.720226706959365e-02, 3.693883783311096e-02, 2.293369530695809e-02, 5.168807377829693e-02, 7.094817054729928e-02, 6.980157843564054e-02, 4.899070949741618e-02, 5.645697352079112e-02, 7.307882788037302e-02, 4.696739536098742e-02, 5.042673737687613e-02, 4.103661058108397e-02, 5.160113768857039e-02, 5.090299811003664e-02, 6.464478396274101e-02, 6.354564905454246e-02, 5.572551608300658e-02, 4.662967481100234e-02, 4.194834207564526e-02, 3.585905881663597e-02, 6.005432430176307e-02, 4.124786219074176e-02, 3.207943720450168e-02, 2.784404124514140e-02, 3.654937224163091e-02, 4.011479140977668e-02, 2.713978850375775e-02, 3.781827074661633e-02, 3.523165787778590e-02, 4.167668632805444e-02, 3.848638466745847e-02, 5.287582069818227e-02, 4.333146439895246e-02, 4.220492817916022e-02, 4.224853213011139e-02, 4.184340863326450e-02, 3.141632546000004e-02, 3.999366946508429e-02, 3.931927974732933e-02, 4.372544148505143e-02, 5.080263334146705e-02, 2.463257124748323e-02, 3.471853473986493e-02, 3.435609445287251e-02, 4.019171577320303e-02, 4.179470717763500e-02, 3.685846945240153e-02, 5.471527445472739e-02, 5.453732157829685e-02, 3.914626810042336e-02, 4.355634176979908e-02, 4.557461044782554e-02, 4.570377060561159e-02, 3.025158064714845e-02, 2.560469006785475e-02, 3.011290786184602e-02, 3.724615716978680e-02, 3.547725046099312e-02, 2.209402836485670e-02, 4.910652201740226e-02, 4.229686727715604e-02, 3.356472173554169e-02, 2.681957957740947e-02, 3.714642884232458e-02, 4.022990180424552e-02, 4.007135122247866e-02, 3.745945630296001e-02, 3.621895196501421e-02, 2.839466616122927e-02, 2.980429118476205e-02, 3.094119146978450e-02, 2.297694652014160e-02, 4.461477944334644e-02, 2.835254580760251e-02, 4.975079673066877e-02, 2.349631579622746e-02, 3.420476064223620e-02, 3.359495151856780e-02, 3.270047009717620e-02, 3.125812712615506e-02, 2.116481555977200e-02, 2.576221964919026e-02, 2.667559539631923e-02, 3.939224053120333e-02, 2.517588250342808e-02, 3.358580423176939e-02, 3.743540160311355e-02, 2.453605673822270e-02, 2.688338603038434e-02, 2.531125286048008e-02, 2.877849493103402e-02, 3.723155330252979e-02, 4.082569063188148e-02, 2.450535345681581e-02, 2.699540023387215e-02, 3.306921968973429e-02, 1.039918052813910e-02, 3.454706748849320e-02, 3.592507001790516e-02, 2.482612226750941e-02, 1.811303044645325e-02, 3.355900161810478e-02, 2.181657767219171e-02, 3.816039277881386e-02, 2.209620198133119e-02, 2.795034402565085e-02, 3.175646435619647e-02, 2.611702656758814e-02, 3.259863256252478e-02, 3.426577244842036e-02, 2.695290860622604e-02, 2.758600079289394e-02, 3.750107614638445e-02, 2.645715062321733e-02, 2.615644483023633e-02, 3.226039769802700e-02, 2.761132806845679e-02, 3.035049176751340e-02, 3.085806767095566e-02, 2.573345848298293e-02, 4.399431174831552e-02, 2.461526975664489e-02, 2.540082652839385e-02, 3.370998304217721e-02, 2.471274027646599e-02, 2.575829047546926e-02, 2.786765391295712e-02, 1.869179494475287e-02, 2.388854823068112e-02, 2.467548084683406e-02, 3.261092801891975e-02, 1.302275586207832e-02, 2.271523235361582e-02, 4.448083966908727e-02, 2.680346424219189e-02, 2.594694385345398e-02, 3.295989946215781e-02, 2.767567864516975e-02, 2.179127673350878e-02, 2.104788943853840e-02, 2.639518059316863e-02, 2.634314961752308e-02, 1.838989011890158e-02, 1.833974789728829e-02, 2.256337781660165e-02, 1.436810963328371e-02, 1.940499262801514e-02, 2.766767963468551e-02, 3.512828427814989e-02, 1.984590900234687e-02, 2.893519999463554e-02, 2.968342015379934e-02, 1.996410435637004e-02, 2.426892523239569e-02, 2.297396913127142e-02, 2.111697772693942e-02, 3.181137692292194e-02, 2.675425879393097e-02, 1.086846831804944e-02, 3.759589529336664e-02, 2.280146922278429e-02, 1.819497173774054e-02, 2.063644496716279e-02, 2.270901537373499e-02, 1.270982226259938e-02, 1.973449055315980e-02, 1.761895088995177e-02, 2.719658082080443e-02, 2.656389894483613e-02, 1.473221469219742e-02, 2.228124026476882e-02, 2.727653484066386e-02, 2.189052592286641e-02, 2.316594100379423e-02, 2.892494107684859e-02, 1.404388194323369e-02, 2.011572422803489e-02, 1.088150553445331e-02, 1.852536185358338e-02, 3.265064472550145e-02, 3.853512439531204e-02, 2.175549966660117e-02, 2.651179872322488e-02, 2.920541573737492e-02, 3.137447268565548e-02, 1.575817256848497e-02, 1.328489953080951e-02, 1.233490101831306e-02, 1.923072005187391e-02, 4.247162586594300e-02, 1.943817531990653e-02, 8.543639458333752e-03, 2.295449855685652e-02, 1.558961509902430e-02, 2.611747516214348e-02, 2.356850081201824e-02, 1.341001851551853e-02, 3.306751336065782e-02, 1.592244900527083e-02, 1.969833876604556e-02, 1.486892435254054e-02, 1.612910837715945e-02, 1.557958211799735e-02, 1.171712670254146e-02, 1.502070509535000e-02, 2.340701962724612e-02, 2.095305301134348e-02, 1.439552664591933e-02, 3.189320364733799e-02, 1.136985552693155e-02, 1.519222669751328e-02, 1.862069530118277e-02, 1.582987322584033e-02, 2.741027938932878e-02, 1.640614416594809e-02, 1.851560364167305e-02, 1.472945122271564e-02, 1.409727557573914e-02, 1.594541184778146e-02, 1.610293448950480e-02, 2.942631344803042e-02, 3.201406818595425e-02, 1.385842373334010e-02, 1.769351424343803e-02, 2.580485522491164e-02, 2.180518914543362e-02, 1.361828993011185e-02, 2.954660736401423e-02, 1.299714972074803e-02, 1.729785686899784e-02, 2.516716227909655e-02, 1.420023341040060e-02, 1.636876971648899e-02, 1.621640059195951e-02, 1.688706732197422e-02, 1.087903504073934e-02, 2.790449912458285e-02, 1.688932122158436e-02, 1.749326486602976e-02, 6.516322481344735e-03, 3.415674288938870e-02, 1.503447947249325e-02, 2.643407522527194e-02, 1.516229522700117e-02, 1.658090640271777e-02, 1.366544525753361e-02, 1.460252612750456e-02, 1.119538887263396e-02, 1.805016901363928e-02, 9.667578669323695e-03, 1.986662296747654e-02, 8.820627222224058e-03, 1.456071445648433e-02, 1.674403205908247e-02, 1.381210813971453e-02, 2.517168241288489e-02, 1.462686308455838e-02, 1.208160998887694e-02, 2.505817452888021e-02, 2.382969744993811e-02, 1.598230049689810e-02, 1.369448664271854e-02, 1.948575976129903e-02, 1.056393204900767e-02, 2.255892555499768e-02, 2.021364734095509e-02, 9.048818751237201e-03, 1.887725534003863e-02, 6.682711842071708e-03, 1.909795612775680e-02, 1.140453567317810e-02, 2.753721093395758e-02, 3.302614628109211e-02, 1.271023862016258e-02, 2.560886835232716e-02, 1.320444982937820e-02, 1.284651149286557e-02, 3.044008777348749e-02, 1.348673729918045e-02, 1.591370277044838e-02, 1.295710986014382e-02, 1.087895951344948e-02, 2.279796131887624e-02, 2.612211134456242e-02, 1.259175515327875e-02, 2.558882522652023e-02, 9.618380487430595e-03, 1.479852222228800e-02, 2.309797996464382e-02, 1.603081015911888e-02, 1.415910694050197e-02, 1.728306303761338e-02, 1.276778105983601e-02, 3.308172190577766e-02, 1.976521807968108e-02, 1.690333008539276e-02, 1.226208647460899e-02, 1.475601668886631e-02, 8.053622461151062e-03, 1.113074540705208e-02, 1.475559256834044e-02, 7.281388280548275e-03, 2.036174783536427e-02, 1.918243831992948e-02, 1.889056319622194e-02, 1.624476983848635e-02, 1.322844828162619e-02, 8.020529528923785e-03, 9.302205788988091e-03, 2.324904458901371e-02, 1.716112924105871e-02, 2.565409074617520e-02, 3.171766615483474e-02, 2.108725474057984e-02, 1.748220865296804e-02, 1.877150227641148e-02, 1.179498837362512e-02, 1.009581689549094e-02, 1.972388203401981e-02, 2.671778467594478e-02, 7.248630745392504e-03, 2.049758156114483e-02, 2.426019675656863e-02, 2.259358188046992e-02, 1.476649363720404e-02, 1.568858388521633e-02, 1.979527953814779e-02, 1.028400417939656e-02, 1.504105487922332e-02, 2.380291237568271e-02, 2.000368809081790e-02, 2.527867512616310e-02, 2.376261346145127e-02, 3.050324882532027e-02, 1.659822607471730e-02, 1.633058988070616e-02, 2.662405223686632e-02, 2.353547572691782e-02, 1.281277619877899e-02, 1.628560720155155e-02, 7.017307762226649e-03, 8.491754539053646e-03, 2.502135472001487e-02, 2.084876680928709e-02, 2.543657152832098e-02, 2.524504885878487e-02, 1.598332224733351e-02, 2.068760225812289e-02, 1.668864349762408e-02, 1.023224897447422e-02, 1.524729970487614e-02, 8.696387826393559e-03, 1.231922484400945e-02, 1.033712500309784e-02, 1.048348566152360e-02, 9.392006445288198e-03, 7.813433187350569e-03, 7.865976762476619e-03, 1.220836398835655e-02, 1.916076834981000e-02, 8.940412018597677e-03, 1.751776381691593e-02, 1.490817412706738e-02, 1.767142538825853e-02, 2.405308447688409e-02, 1.198748246389371e-02, 1.231995572168034e-02, 2.486419130919133e-02, 1.951865623979126e-02, 1.747915792501724e-02, 8.492328282129966e-03, 1.668374386254963e-02, 1.754618921979211e-02, 1.458307197409197e-02, 8.323137337361800e-03, 1.274062932392880e-02, 8.410188115323253e-03, 1.269005893347873e-02, 1.136442787850834e-02, 8.818782412170273e-03, 2.160634516284012e-02, 1.340810321012038e-02, 1.006245788726925e-02, 2.762121077490938e-02, 8.537116149667495e-03, 6.009428002665076e-03, 2.111747808710827e-02, 1.434229327242569e-02, 7.272025712679286e-03, 1.219049851176034e-02, 8.042540619441913e-03, 2.166340241441417e-02, 7.659405613821853e-03, 2.160681106352005e-02, 2.567201033409875e-02, 1.999959083056831e-02, 1.246444916488348e-02, 9.267771103405145e-03, 1.472230874709612e-02, 1.314851736976928e-02, 8.207612478590377e-03, 1.636601311369268e-02, 1.807796753537621e-02, 7.688082217271478e-03, 2.071540162988856e-02, 7.788185088534047e-03, 1.597767579172581e-02, 2.293052144704397e-02, 1.182270567175115e-02, 2.032551844868519e-02, 1.376179972550015e-02, 1.093443191896552e-02, 1.384338120324941e-02, 1.163217670559371e-02, 1.039524542468869e-02, 9.966850307538562e-03, 1.217960730942943e-02, 1.073913075589897e-02, 6.763783609254184e-03, 1.517778500440018e-02, 2.270592729279900e-02, 1.846622390006604e-02, 2.623890707605648e-02, 7.533364822009709e-03, 1.853978032518270e-02, 8.041290967190102e-03, 1.460460987080742e-02, 2.659223146872393e-02, 1.703228597509044e-02, 1.416663531464171e-02, 1.666648617882595e-02, 1.907056506395445e-02, 1.430534552992007e-02, 7.696779977048847e-03, 1.167326555493785e-02, 1.436149273056273e-02, 1.838692412368310e-02, 1.353724869235065e-02, 1.681279417777634e-02, 1.151803808067636e-02, 1.031435059996114e-02, 8.337015895772435e-03, 2.277075983165193e-02, 2.397243116839223e-02, 1.812170997012602e-02, 1.874333207809841e-02, 8.697973516992316e-03, 8.184110567891815e-03, 2.108661660683940e-02, 8.693661360300944e-03, 1.426733294264401e-02, 1.462770829876488e-02, 8.695908844725686e-03, 8.654863617670460e-03, 1.934971945094445e-02, 8.209769280919311e-03, 2.430281348519689e-02, 1.027999912041226e-02, 2.059710697393800e-02, 1.323462918456739e-02, 9.383358080911165e-03, 1.388579764401855e-02, 8.494765205142233e-03, 1.426912993835203e-02, 4.212101279016381e-03, 1.435120968219186e-02, 1.083143579845970e-02, 1.991598193427021e-02, 1.134117611488289e-02, 2.042137454721106e-02, 1.517747714823597e-02, 2.301683551594378e-02, 8.337077429131813e-03, 2.699461485525742e-02, 1.300178527741041e-02, 1.323824982692387e-02, 1.404003021922931e-02, 7.012093935202459e-03, 1.157535791662150e-02, 2.493419391913631e-02, 1.567677143370843e-02, 1.931190241358753e-02, 2.412480373773626e-02, 6.927283812134376e-03, 1.550015182584239e-02, 8.866999581439808e-03, 9.370222142210612e-03, 6.572951009258939e-03, 1.299160583410158e-02, 5.595079888014731e-03, 1.640633980935979e-02, 1.807879608294467e-02, 1.144886587652079e-02, 1.744439649377878e-02, 1.070279205450398e-02, 9.054277081260395e-03, 3.085483378566610e-02, 9.642994282853479e-03, 1.620899907570708e-02, 9.232946394178890e-03, 1.173449464657123e-02, 2.218921336525824e-02, 8.835161644762203e-03, 1.916393618914874e-02, 8.023629121563597e-03, 2.715375776553675e-02, 2.048842144586965e-02, 1.262416515047694e-02, 1.788006823135449e-02, 8.932237345090141e-03, 7.692833238072531e-03, 1.044603183265274e-02, 1.378220348643824e-02, 8.093322739186740e-03, 1.199346492964681e-02, 7.737924595955168e-03, 1.537673395474208e-02, 1.310659231672941e-02, 1.434423296828824e-02, 8.700043045543806e-03, 2.821374793500210e-02, 1.151333675659719e-02, 9.127330928219188e-03, 1.414829939639849e-02, 1.711193273353952e-02, 5.966149195261374e-03, 2.166192301563935e-02, 2.055088162575508e-02, 2.266179605366993e-02, 8.983664753864560e-03, 1.824887916710485e-02, 1.437933847857665e-02, 8.944606895036159e-03, 6.286783518714370e-03, 1.405510513839882e-02, 9.413427073152590e-03, 2.299452285041325e-02, 3.009841846273621e-02, 1.641260220993563e-02, 2.244948280326042e-02, 8.006598383785320e-03, 4.636590869082449e-03, 1.844039448403655e-02, 1.327624999697228e-02, 1.668949945528583e-02, 3.772541680253508e-03, 1.056851714288365e-02, 1.346751129585476e-02, 2.095147098450785e-02, 7.787656017985119e-03, 2.160280105604599e-02, 5.487819452444572e-03, 1.570994601457502e-02, 1.772453349140525e-02, 1.530244539174905e-02, 5.552207937932657e-03, 1.461356661377125e-02, 6.424769191213045e-03, 9.599391607120009e-03, 5.005172640064393e-03, 1.858699553764835e-02, 1.124826461627598e-02, 2.024692678008108e-02, 1.799116676869847e-02, 1.062160514565367e-02, 1.107031116097424e-02, 1.596587087763586e-02, 1.176096993193052e-02, 5.317235366553908e-03, 1.507443239058887e-02, 7.681609830586505e-03, 4.931150847795084e-03, 1.583825956682019e-02, 1.945237064219168e-02, 2.098954370738423e-02, 1.013121459647855e-02, 1.833306790665164e-02, 1.170386294090672e-02, 6.628629147323831e-03, 5.349216888537105e-03, 6.705852988791177e-03, 1.053201841541195e-02, 1.421222082165010e-02, 1.409674185858016e-02, 7.555671306457059e-03, 1.164301098258756e-02, 1.760654755378076e-02, 2.183303008960246e-02, 7.501177361390359e-03, 1.579876206375458e-02, 1.485684451458293e-02, 1.004432037166740e-02, 2.063020056692887e-02, 1.147193512825632e-02, 1.161522314583657e-02, 5.374221450875684e-03, 8.345535188390350e-03, 2.256895883653085e-02, 4.654434856562789e-03, 6.948109709588522e-03, 1.785605817829125e-02, 4.791134758314097e-03, 7.688466610262994e-03, 9.958790089897179e-03, 5.629828739058765e-03, 1.531080468685766e-02, 1.117954679751807e-02, 2.124120376691892e-02, 1.548546465513259e-02, 8.937812076658645e-03, 1.036961210873559e-02, 1.961885686500030e-02, 1.355410442631511e-02, 9.822409240676308e-03, 8.513141701040394e-03, 9.647005847262156e-03, 7.262692686724103e-03, 6.465195876495095e-03, 7.635215024101249e-03, 1.175251899370993e-02, 1.647164203579479e-02, 8.007802388025068e-03, 1.005594321123824e-02, 1.716028840101607e-02, 2.386694120292794e-02, 9.863495638687172e-03, 1.661272750609781e-02, 8.971311486963464e-03, 5.231800492035754e-03, 8.234005665833133e-03, 1.315424624393706e-02, 1.453844855460516e-02, 7.336502244234212e-03, 1.802987959492746e-02, 1.771033432311218e-02, 7.053558706062608e-03, 7.008616925375185e-03, 9.721701103765187e-03, 8.736463629451926e-03, 1.047867852951441e-02, 6.074445954351724e-03, 1.055365789185018e-02, 1.103266234277737e-02, 6.654202352898983e-03, 6.786996949608075e-03, 4.014163973249755e-03, 1.419936269340140e-02, 5.361085481397302e-03, 1.717907902927458e-02, 2.064540397312533e-02, 9.406364541298272e-03, 5.038846215742885e-03, 9.132511594295149e-03, 1.060416491364699e-02, 7.928352594984006e-03, 9.160488834838554e-03, 1.890548856312294e-02, 1.521818397207645e-02, 1.511293156123564e-02, 1.406256319061086e-02, 1.453074750604838e-02, 1.462994054437037e-02, 1.410958623727226e-02, 1.860361128634387e-02, 9.729255042464186e-03, 2.477764028087674e-02, 1.585962643898643e-02, 6.257584924050420e-03, 6.631598911182527e-03, 1.554493713947572e-02, 6.579552315008143e-03, 1.079693866210093e-02, 9.300325372751231e-03, 7.990248782282210e-03, 8.011187689042047e-03, 1.507470542513526e-02, 1.712121986347351e-02, 1.027043841176949e-02, 1.919482990453911e-02, 1.127484834888264e-02, 7.225481483828536e-03, 5.848431454795594e-03, 1.596917290027382e-02, 9.202253679954664e-03, 1.584116486454590e-02, 5.492485332936587e-03, 1.566665494135230e-02, 1.392452438464026e-02, 1.490546320356421e-02, 1.128489673371287e-02, 2.008266375361450e-02, 7.406002026222967e-03, 1.215366952625727e-02, 5.728148313284526e-03, 6.768355174717450e-03, 8.424459742391548e-03, 8.651133698667374e-03, 1.055901823051280e-02, 4.181644620473813e-03, 4.335556501847177e-03, 6.445379964204719e-03, 2.086139833115225e-02, 1.287632918102450e-02, 1.952844996043376e-02, 1.970177182329903e-02, 8.654165591185491e-03, 1.095633647084782e-02, 1.662305947218592e-02, 9.050677152778974e-03, 1.298267087473654e-02, 1.375868274846912e-02, 2.213581163455351e-02, 1.383448432291145e-02, 2.218066257246941e-02, 5.410971329544757e-03, 4.863796090922607e-03, 4.366369766125282e-03, 2.710069619018926e-02, 1.378538333918233e-02, 5.057964082016396e-03, 1.252792250966264e-02, 7.355544393034420e-03, 1.183315081478797e-02, 8.157468331090375e-03, 1.423699505953394e-02, 1.295240860665191e-02, 2.188650361244003e-02, 1.377559740150762e-02, 9.719270949497266e-03, 9.788006023622963e-03, 3.713398410862666e-03, 6.956735043056173e-03, 7.605000049267938e-03, 7.834794974938736e-03, 1.550844553807941e-02, 1.633355285394584e-02, 1.897832357116702e-02, 8.803845134716604e-03, 8.228791886949730e-03, 6.072019866421840e-03, 1.653209621490014e-02, 1.120940263723356e-02, 1.085906389321068e-02, 2.543533666656545e-02, 7.650757746159553e-03, 1.298216953753029e-02, 1.212269763937293e-02, 1.020482717688681e-02, 1.443306060266561e-02, 1.160947184466706e-02, 7.952595070573960e-03, 1.580270454629033e-02, 1.708087566938389e-02, 4.422044259799643e-03, 1.081587521563026e-02, 1.156718995327182e-02, 1.338247779304787e-02, 1.361696037734056e-02, 1.397742575549220e-02, 1.140170550054768e-02, 5.513842909843425e-03, 5.468081175526231e-03, 1.652307238684735e-02, 1.703826580894349e-02, 1.124510889582360e-02, 4.538946016832135e-03, 6.203514080848258e-03, 1.506627853576618e-02, 4.080302055116337e-03, 6.263123273440809e-03, 7.806612463121102e-03, 1.337627097489087e-02, 2.089569082865183e-02, 6.242261102378295e-03, 8.210595289873536e-03, 4.581846889049329e-03, 2.547444711591088e-02, 6.389055559760927e-03, 7.165335853861516e-03, 1.018394379588372e-02, 6.290330668281033e-03, 9.146534998472093e-03, 4.633433268142629e-03, 1.479508002607224e-02, 1.267531234943141e-02, 1.976345320675359e-02, 1.381347871753925e-02, 1.056213316209601e-02, 7.656322689795303e-03, 9.178937256448473e-03, 1.343301928917748e-02, 4.824616568192324e-03, 6.126070420962292e-03, 1.016183306947094e-02, 1.275160901060998e-02, 2.192982162407318e-02, 2.099297572786487e-02, 4.426139908156154e-03, 6.023357790297975e-03, 1.093667157588836e-02, 1.282523855091218e-02, 9.684249970725881e-03, 4.607232979861647e-03, 6.611445723147648e-03, 6.160059158190738e-03, 6.409167564992368e-03, 2.293311713595484e-02, 1.193330754399362e-02, 6.798734852378725e-03, 9.961739999056352e-03, 8.894448791351831e-03, 3.597511748367512e-02, 8.326256930495218e-03, 1.184595813888184e-02, 2.667221349104443e-02, 5.629467514415886e-03, 6.011950798641157e-03, 1.511385124119533e-02, 5.958553382416767e-03, 7.963243106813657e-03, 1.598354877539745e-02, 1.689976812976589e-02, 7.235440810695985e-03, 1.151100025424639e-02, 9.981544846279078e-03, 9.899225753674763e-03, 1.661113151088878e-02, 4.119524224597918e-03, 9.538452774949937e-03, 8.243342043508642e-03, 1.290574747530167e-02, 2.696700779028923e-02, 2.197593591408497e-02, 8.799095163705983e-03, 7.042210545787105e-03, 2.402514056328667e-03, 1.352151040351170e-02, 7.457342483577483e-03, 1.095612523508382e-02, 1.901340801932340e-02, 9.166589743178332e-03, 6.277493857013923e-03, 1.101338323949057e-02, 1.060134485117650e-02, 1.411319988430442e-02, 7.388931082560509e-03, 8.763548305858914e-03, 1.223193627632088e-02, 1.918563930916220e-02, 5.833084256379647e-03, 6.703816521163152e-03, 1.290658332129250e-02, 9.364659401980804e-03, 8.787843785770921e-03, 8.747460130956172e-03, 6.085657312254072e-03, 5.087204807157566e-03, 1.635370255754376e-02, 4.180825097218461e-03, 5.116094392710011e-03, 1.520264149142276e-02, 1.079224754901669e-02, 1.968874163154489e-02, 1.732937074773867e-02, 5.312092609748289e-03, 1.732735630575092e-02, 4.606241430833872e-03, 3.886307633864701e-03, 6.102764796826870e-03, 7.449543301619015e-03, 3.699001317589832e-03, 9.139320654885362e-03, 6.523845871201103e-03, 1.027810920693931e-02, 5.274373580139160e-03, 2.117490004359796e-02, 7.048744314455374e-03, 1.672501098807011e-02, 8.086993263066625e-03, 7.283940278536465e-03, 1.064499407722965e-02, 5.127007331637365e-03, 1.094377572007111e-02, 7.696766883897492e-03, 1.461439038976148e-02, 4.069808698235643e-03, 1.740012556863754e-02, 1.347900363684170e-02, 1.679263343401732e-02, 1.358479217374424e-02, 2.230331735654261e-02, 4.122444900960353e-03, 1.350522613012477e-02, 1.429557324797377e-02, 5.717762985502010e-03, 9.188969612553758e-03, 1.794197921756863e-02, 7.329093480834359e-03, 1.020420264921825e-02, 1.006500604177207e-02, 4.568720644988968e-03, 2.050477551260093e-02, 1.130414554421919e-02, 6.641322428012218e-03, 5.110875724671927e-03, 1.989214931626372e-02, 2.476112565176937e-02, 4.146811069774481e-03, 5.414406493001204e-03, 6.548718727508607e-03, 6.438003104123883e-03, 3.896989410913729e-03, 4.544494601315249e-03, 9.614894330385551e-03, 1.491299255315972e-02, 7.999647052187689e-03, 1.028692138722226e-02, 6.396443546170684e-03, 2.334044282524046e-03, 1.204019493075244e-02, 6.445835688537593e-03, 7.474128021028576e-03, 1.119272212726757e-02, 1.195832248901489e-02, 1.271335178366267e-02, 6.458188968862974e-03, 1.488341907129263e-02, 7.481889349963983e-03, 1.505134530101992e-02, 1.488753354525304e-02, 8.687848838024955e-03, 1.519251739805572e-02, 6.023731641298154e-03, 1.760911970034855e-02, 7.356942701147601e-03, 1.142269770844436e-02, 6.317610901615240e-03, 1.061550198428015e-02, 7.687460729061759e-03, 4.835269841168533e-03, 4.068657198245959e-03, 6.516260715372362e-03, 1.655995039325913e-02, 4.988467273214533e-03, 3.708896450639866e-03, 4.931176371278487e-03, 6.280591532263991e-03, 7.172300890542375e-03, 6.525914963745558e-03, 5.826354767776779e-03, 5.772205327887232e-03, 8.705553720929435e-03, 9.935839137959725e-03, 5.687109823773659e-03, 1.461725506142932e-02, 3.888145315103614e-03, 1.064543927109427e-02, 5.871543904694907e-03, 9.849817050964870e-03, 9.383645401868481e-03, 1.130387244155234e-02, 4.509704106554617e-03, 1.405796826484286e-02, 7.190737041895049e-03, 5.691087898095704e-03, 2.197357326953629e-02, 1.728298176419155e-02, 1.159483788883222e-02, 1.110154031464629e-02, 8.869311464857794e-03, 2.611210761628962e-03, 6.205228362789183e-03, 5.603257611683388e-03, 1.507403477607378e-02, 1.781104557453395e-02, 4.756981096110167e-03, 1.760001567548429e-02, 1.382787299834581e-02, 6.458613687792953e-03, 1.499940121691762e-02, 6.130810231529922e-03, 6.174838912075115e-03, 8.387773532515935e-03, 1.341399447116820e-02, 1.621341639177487e-02, 3.569584735194479e-03, 1.275052776694117e-02, 1.003985439102921e-02, 8.576924232668497e-03, 1.421225694903475e-02, 2.003356331927009e-02, 1.116546184989486e-02, 5.671422237426258e-03, 1.440332119192485e-02, 9.099902671697569e-03, 6.388626894392133e-03, 4.140480315620304e-03, 1.719250928761154e-02, 9.384473487907798e-03, 7.128303768812713e-03, 1.121750380530893e-02, 3.489243294621494e-03, 3.758126558204296e-03, 1.411479856911495e-02, 3.748678362625224e-03, 2.867440045034400e-03, 1.669379317466918e-02, 4.993920731936301e-03, 6.516405310535087e-03, 7.038139280474915e-03, 5.683302655965297e-03, 6.256826452916640e-03, 1.676035622259537e-02, 4.519104974393564e-03, 8.491438924630309e-03, 1.565507334528229e-02, 5.025683891264321e-03, 1.057348761235859e-02, 5.850795151611460e-03, 3.984299213578026e-03, 2.138684329426256e-02, 1.602226059820451e-02, 4.573063242171224e-03, 1.181525010303272e-02, 4.739139305427660e-03, 1.016226680670360e-02, 1.573699929662862e-02, 1.728393066346154e-02, 7.239123854268341e-03, 1.237918821533713e-02, 1.313687737897798e-02, 2.267207988937117e-03, 2.209249906721801e-02, 1.875330052790400e-02, 9.446910186574474e-03, 5.637856568931883e-03, 1.105683037088486e-02, 6.624469634620701e-03, 1.966467865325651e-02, 6.446316151882786e-03, 1.282395257068551e-02, 4.403507191333511e-03, 6.728892307481159e-03, 1.039119489884953e-02, 1.112404353908967e-02, 2.957233546720700e-03, 1.349908445935688e-02, 2.725945378864807e-02, 4.181809125026868e-03, 8.994215508175486e-03, 5.509880819335780e-03, 5.879606453711750e-03, 1.747677190324654e-02, 2.591663475113270e-03, 1.319825522988495e-02, 9.110363183682977e-03, 1.433919436793016e-02, 4.462291777949979e-03, 6.324589616048141e-03, 1.973421027036467e-02, 8.053210984711481e-03, 4.059688850798686e-03, 2.694886060903353e-02, 1.347355889129161e-02, 4.747594053668404e-03, 2.023364344854730e-02, 4.452464527245404e-03, 3.462165630986470e-03, 9.665097114071276e-03, 7.435210720133575e-03, 3.323753205423446e-03, 1.976630001847180e-02, 7.196426483596621e-03, 1.483911473677746e-02, 3.100629557646508e-03, 5.671298069870653e-03, 7.292950141139837e-03, 1.575545850823740e-02, 5.678166775199024e-03, 1.726785620912690e-02, 4.544895048403051e-03, 3.340938746799488e-03, 6.477536267047048e-03, 3.098755339871407e-02, 6.189005796354460e-03, 3.154038470206495e-03, 5.259989454774272e-03, 5.895805601494118e-03, 6.730278535744483e-03, 3.093872988890652e-03, 7.538152582251999e-03, 9.199982976007761e-03, 1.658178962859384e-02, 3.206007446222777e-03, 9.694624360518732e-03, 3.355828554983452e-03, 7.742496335419144e-03, 1.293433756041602e-02, 6.836679375970632e-03, 1.643721587968224e-02, 8.576670723318403e-03, 4.853943877890000e-03, 2.940488589567281e-03, 8.275894741173221e-03, 5.001830438602326e-03, 7.903698126184810e-03, 1.441692288451887e-02, 2.663691996968450e-02, 8.733127413727870e-03, 3.455445907304153e-03, 4.607895271287705e-03, 1.220799737818410e-02, 1.114544340998803e-02, 1.903404025231355e-02, 1.701333932990515e-02, 1.294100001807079e-02, 6.965496677894289e-03, 4.879079558604298e-03, 1.123982272531178e-02, 7.906166639517521e-03, 9.751440146711067e-03, 1.934809336076853e-02, 3.721994626383067e-03, 9.340419345643322e-03, 1.284973928760350e-02, 4.956487068388736e-03, 3.145091078704262e-02, 1.012245884424677e-02, 2.028357088905881e-03, 5.569483447099208e-03, 1.914763373213204e-02, 1.156791236121851e-02, 1.306259455385976e-02, 1.655646712556005e-02, 1.260142313680503e-02, 8.357950240770740e-03, 1.506340541405400e-02, 8.332549693932163e-03, 1.587807165475990e-02, 6.878178071859527e-03, 1.412243997331706e-02, 3.120827462689659e-03, 4.398965717688725e-03, 8.259311711002776e-03, 7.233358143435533e-03, 5.197428325430436e-03, 3.622322955787684e-03, 1.167081361619065e-02, 8.714380910005464e-03, 1.095600751311185e-02, 1.191738523062804e-02, 9.140168507751782e-03, 1.001757744545015e-02, 8.506397686420130e-03, 9.722282928596067e-03, 1.297432464697304e-02, 7.219434988481112e-03, 9.209020493862668e-03, 9.921322879963980e-03, 9.980818531603406e-03, 9.630079829728905e-03, 3.357846252876025e-03, 4.768054758776315e-03, 3.259840360886906e-03, 4.409137719927759e-03, 5.062599086232165e-03, 1.942227734980435e-02, 5.674463207405933e-03, 7.884803479958581e-03, 5.360956620856395e-03, 1.805022920602861e-02, 7.987066415636708e-03, 1.680737847607147e-02, 1.478096936036022e-02, 1.820944601761959e-02, 7.207940293072723e-03, 1.512972995825766e-02, 9.166210341575469e-03, 7.059270261528239e-03, 2.116482899034370e-02, 8.670981454938763e-03, 2.605180939800998e-03, 1.593745049114080e-02, 1.362546652383223e-02, 9.218258363001081e-03, 2.600280591580007e-02, 1.597239375528287e-02, 4.814368024894578e-03, 4.137417121779333e-03, 2.369807341400906e-02, 5.401662681065584e-03, 3.726730857733407e-03, 4.308931501541972e-03, 2.141284811371815e-03, 4.424706992891558e-03, 1.888610797157101e-02, 7.782497557358994e-03, 1.021195947926605e-02, 7.437711237717557e-03, 2.523700443292790e-02, 1.773852040988353e-02, 1.156557441230671e-02, 1.092047649102799e-02, 4.826404742901173e-03, 1.282175608955752e-02, 4.790583884113291e-03, 1.142753478368318e-02, 4.426729728118445e-03, 1.158422704223720e-02, 3.391209202187078e-03, 1.001473689263108e-02, 1.252916069798864e-02, 5.707912666560084e-03, 5.629698199515239e-03, 4.927916773899804e-03, 2.169715805472160e-02, 3.715714448488668e-03, 8.045549786903519e-03, 1.546729002763469e-02, 6.965327607776959e-03, 5.538504405056838e-03, 1.095732773520534e-02, 9.006051265355357e-03, 1.201673483291108e-02, 4.746447842118431e-03, 7.476636515874058e-03, 1.194050127079178e-02, 3.869414496336868e-03, 1.038364586563757e-02, 1.949216823744920e-02, 2.802352911302194e-03, 6.674437992677161e-03, 9.164672302372770e-03, 1.368656791010638e-02, 1.245226455698920e-02, 8.931057366325245e-03, 2.645348949013631e-02, 1.140304388767219e-02, 1.181810911410838e-02, 9.559808289704767e-03, 6.009400137965184e-03, 8.855551531061842e-03, 9.364459098493930e-03, 7.208951196484144e-03, 5.995990619327212e-03, 4.087774342848200e-03, 7.722198608574949e-03, 3.514327962816314e-03, 2.719949115082328e-03, 3.799799211615422e-03, 1.249391148822183e-02, 1.804161254317347e-02, 1.539981721720789e-02, 1.189408820722303e-02, 4.289544231141862e-03, 1.910956185888519e-02, 1.704378567732023e-02, 7.588997625015320e-03, 4.210915331565813e-03, 9.948942749419785e-03, 4.522244470418236e-03, 1.721270819147026e-02, 1.173704645987501e-02, 1.416153656454080e-02, 1.534160583396816e-02, 2.422125216099242e-02, 4.797956131955937e-03, 4.069220168618811e-03, 9.422798111639999e-03, 2.028998394491706e-02, 1.245379060824355e-02, 1.161505980795576e-02, 8.639466485853358e-03, 1.231161436754279e-02, 3.316410115029357e-03, 1.200136008818763e-02, 5.612001898645526e-03, 2.709369485238030e-03, 4.340466823808282e-03, 4.301468602838359e-03, 5.478537849657012e-03, 9.080815700793573e-03, 4.364229164302042e-03, 1.823833038292389e-02, 1.413121406949619e-02, 4.959126374328783e-03, 5.137828078312110e-03, 2.572904296751414e-03, 1.642441050581690e-02, 6.635655519564384e-03, 4.218147581653144e-03, 5.204736088014660e-03, 8.441829780059962e-03, 1.062848484610767e-02, 4.486892480578594e-03, 1.529348692357458e-02, 6.237522671111762e-03, 5.635577822127943e-03, 7.554537320099164e-03, 1.197361491091402e-02, 4.862242298365831e-03, 1.530871833985011e-02, 7.567369930466009e-03, 1.101143384880855e-02, 7.117439480370834e-03, 1.070163568998548e-02, 1.960805774161242e-02, 4.588556469126279e-03, 5.903489520831634e-03, 3.830759807537656e-03, 6.988218706165199e-03, 4.728533024271612e-03, 7.512303723186145e-03, 2.645965521447284e-03, 1.005686566289949e-02, 9.783513324651339e-03, 8.174372374811903e-03, 4.722325133522246e-03, 1.982750250957463e-02, 1.394287352982957e-02, 6.358859659933805e-03, 1.420028161367211e-02, 1.363674651345437e-02, 5.123258265855800e-03, 5.189340494313341e-03, 1.224703273624886e-02, 1.721809181224706e-02, 1.434459573817524e-02, 1.825237094931921e-02, 4.389548118370903e-03, 1.251815275438873e-02, 7.522691202944525e-03, 3.943201321351145e-03, 1.680278190512353e-02, 1.126358336824531e-02, 8.316684183262020e-03, 7.345660863650006e-03, 6.107609910077845e-03, 6.897900139854788e-03, 4.222879833326307e-03, 8.398204237430228e-03, 5.139730219664405e-03, 3.629694178220439e-03, 1.020910412741929e-02, 6.937754681019741e-03, 5.409904746914019e-03, 6.729290729458438e-03, 5.001790748294701e-03, 7.958182602052338e-03, 6.525476908766046e-03, 1.086230532147533e-02, 2.807944661003118e-03, 2.903694607422896e-03, 6.500371408147143e-03, 6.105055012434349e-03, 9.635567735442184e-03, 1.445606463129663e-02, 4.709589356664204e-03, 3.932691125564940e-03, 6.092865081458927e-03, 1.199231445848274e-03, 1.135050019900249e-02, 2.291260584460265e-02, 8.751298000620904e-03, 8.630839418861827e-03, 9.890734954108089e-03, 7.969423507816953e-03, 9.688014176662540e-03, 3.549489617946149e-03, 3.575854148394263e-03, 1.555159947336393e-02, 9.856661305616080e-03, 3.969731223372553e-03, 1.291008129123616e-02, 1.032123350492377e-02, 1.390510455226740e-02, 7.786449416304672e-03, 7.618330116513345e-03, 1.571762746589845e-02, 1.639318127870875e-02, 1.533598667118888e-02, 4.348876394391825e-03, 1.179716422339118e-02, 1.067015666099173e-02, 7.942401459001370e-03, 7.274555208298583e-03, 1.145561676968113e-02, 3.260752693792693e-03, 6.615446481456053e-03, 2.425466112420100e-03, 1.952532913070507e-02, 4.747051873878283e-03, 9.204045820389651e-03, 2.241518617449136e-02, 1.794421097119565e-02, 1.250341335243789e-02, 2.374801127104159e-02, 1.414024138523047e-02, 6.930293232851708e-03, 9.243516198066180e-03, 1.723318029154976e-02, 1.642846792204304e-02, 7.871788881234248e-03, 6.745584109513117e-03, 1.290123626679065e-02, 4.598524816372489e-03, 5.138568561720668e-03, 3.442177410708458e-03, 1.282190925604578e-02, 4.401906862352215e-03, 1.239161300208881e-02, 4.065739379496048e-03, 7.359998411970930e-03, 1.448879508032550e-02, 5.807714015276495e-03, 7.027792920953835e-03, 1.142492816706148e-02, 2.805869454461827e-02, 5.077937717825568e-03, 9.202422403285358e-03, 1.177825347290015e-02, 3.188992625077317e-03, 8.606101205319508e-03, 4.669301148024742e-03, 6.811375150434089e-03, 1.255695265199086e-02, 7.833499271074282e-03, 1.346803943707964e-02, 2.025318786227956e-02, 4.355536976685812e-03, 1.122679542286970e-02, 3.819282259919191e-03, 3.643041911066004e-03, 7.851856470515579e-03, 1.567556101981373e-02, 9.762121828647838e-03, 1.028831416154326e-02, 6.054628091802990e-03, 4.298223823094621e-03, 9.006246478868022e-03, 1.725197731519501e-02, 3.482422493538621e-03, 4.384255845092847e-03, 8.732811966975132e-03, 3.908154465878696e-03, 7.914994352660656e-03, 1.266772819260107e-02, 2.856732174781551e-03, 1.171000121170889e-02, 1.395167349287284e-02, 3.262987696389361e-02, 6.307329394611938e-03, 8.592422923400577e-03, 1.058467440788733e-02, 5.773858590843069e-03, 1.049509590412737e-02, 1.043111747039284e-02, 1.108092133087827e-02, 5.862650599602545e-03, 2.119544648855641e-02, 9.188553263205458e-03, 1.202199089231778e-02, 1.823708374646775e-02, 5.373116534981938e-03, 6.020872512129003e-03, 5.840533101559648e-03, 2.684443390832828e-03, 1.728390457761062e-02, 1.253416894540145e-02, 1.663159018995207e-02, 1.620657411884185e-02, 2.632433285977085e-03, 2.883420792342651e-03, 6.763220869950662e-03, 9.967067070713775e-03, 1.198199060804645e-02, 4.850803291263426e-03, 8.364311870672438e-03, 1.584545034771035e-02, 5.840335669161657e-03, 9.547100775166090e-03, 7.888728830148439e-03, 2.037009043228885e-02, 6.178043286674584e-03, 3.626791222781932e-03, 4.504502626914953e-03, 5.245272225253121e-03, 6.083939427500605e-03, 5.871286388819020e-03, 5.224022006321483e-03, 9.860674385055909e-03, 6.726957115464705e-03, 1.554741566161538e-02, 3.095855025432073e-03, 8.148198118776621e-03, 2.897976570507865e-03, 4.988507486188394e-03, 3.989903293742611e-03, 2.103315782980076e-02, 3.885982581315473e-03, 1.567932860107673e-02, 7.881519023215813e-03, 5.134438540858530e-03, 1.042752571514668e-02, 1.547539391819063e-02, 4.540255978287808e-03, 2.521929936729746e-02, 4.953458240433662e-03, 6.460722705131657e-03, 8.005286618555228e-03, 7.041111061734519e-03, 1.183568388840055e-02, 5.553153198827970e-03, 1.343615575622300e-02, 4.569139826083903e-03, 8.891515110231674e-03, 1.210453612790355e-02, 1.009488184197152e-02, 6.547889367441781e-03, 1.260770946596827e-02, 1.422614461113892e-02, 1.197005005576411e-02, 4.467133845628434e-03, 4.017732378250754e-03, 2.474838424914850e-02, 2.671486133212977e-03, 3.228984709514441e-03, 1.015437207777756e-02, 3.370341281317394e-03, 8.452783743927250e-03, 3.437440831990630e-03, 8.594043130936797e-03, 5.483785735687322e-03, 5.037554445168680e-03, 1.456429872886173e-02, 1.687739092789422e-02, 1.659899889923321e-02, 1.504778687962637e-02, 5.594745306095360e-03, 2.775493171029565e-02, 4.778411456280325e-03, 4.151935091956697e-03, 8.100761135318149e-03, 3.663307127850875e-03, 8.067923983189682e-03, 5.676260900853506e-03, 9.479395661642007e-03, 1.435676964699565e-02, 5.289886819469436e-03, 1.378374990567087e-02, 4.808861176264196e-03, 1.820206518321456e-02, 1.848061846965954e-02, 2.325629247606101e-02, 4.183388420441023e-03, 3.817899542327282e-03, 5.029893569930523e-03, 4.028537374520679e-03, 3.318919116770225e-03, 1.481824447139185e-02, 3.325485481410055e-03, 3.037412684582633e-03, 1.228725586611400e-02, 3.612477793319898e-03, 7.234321468619668e-03, 8.670956276575922e-03, 2.915284518930312e-03, 4.991766641891172e-03, 3.486373386901437e-03, 4.891057800510710e-03, 4.021003982345788e-03, 1.980500052263924e-02, 3.889925323975569e-03, 1.233683264993525e-02, 9.078490074030875e-03, 2.418078650623670e-02, 5.288404684108796e-03, 5.204583239151368e-03, 1.049937880255213e-02, 1.554870272377288e-02, 5.354032808308888e-03, 8.858220742679326e-03, 2.866141988630853e-03, 1.013765892285454e-02, 3.325411568797078e-03, 6.454175901583981e-03, 1.268167390150570e-02, 7.285496748950972e-03, 5.610397678318084e-03, 8.257007126915855e-03, 8.728849159661569e-03, 1.129825164792051e-02, 6.919405087780777e-03, 1.216947624185524e-02, 2.824137181473538e-03, 2.257105345092532e-03, 1.883196719345833e-02, 1.344509028452611e-02, 5.051963438403540e-03, 6.925530426564648e-03, 3.245991486811968e-03, 2.009503460714779e-03, 4.223446082570519e-03, 9.642550666269711e-03, 9.155070046854693e-03, 2.919979459030043e-03, 6.466258014655442e-03, 3.952434772665474e-03, 1.208607379298088e-02, 5.851263453551652e-03, 7.228958868114995e-03, 5.546952816588722e-03, 3.264632243697351e-03, 1.348970229025210e-02, 6.714698719464532e-03, 3.745958003454271e-03, 1.670153693778503e-02, 7.420335860114029e-03, 1.251241242739122e-02, 3.969903868689191e-03, 2.388743239152665e-03, 5.467951588192990e-03, 1.685638736295249e-02, 9.329048070115057e-03, 1.086793707804744e-02, 1.071609306575920e-02, 5.717563662807348e-03, 1.657402840443837e-02, 5.175058837132889e-03, 3.536261569476896e-03, 9.553218525618638e-03, 1.311816689846147e-02, 1.255485948956986e-02, 5.862401593085397e-03, 1.300066856809032e-02, 1.028898555965408e-02, 1.483624276578817e-02, 1.140016329816370e-02, 4.657021023258223e-03, 8.192109061010250e-03, 5.965040398746985e-03, 4.777496686887743e-03, 7.370358439423236e-03, 3.814214720979086e-03, 1.454072775501729e-03, 3.394905432824020e-03, 5.413424008403479e-03, 8.694218451408898e-03, 7.068093932274313e-03, 1.299155365799446e-02, 3.755246721294224e-03, 3.587210815335272e-03, 3.756445051585606e-03, 2.146612655450113e-02, 8.387697415902746e-03, 4.442619198165141e-03, 8.026447806306085e-03, 1.041643310820135e-02, 4.687369090830607e-03, 1.110853090165007e-02, 1.502732112732445e-02, 7.488657801270674e-03, 4.923285347249176e-03, 2.648104303320338e-03, 3.285365627701839e-03, 1.478809346444946e-02, 4.333461561359491e-03, 3.414003980331242e-03, 2.658718539890293e-03, 3.715225573289588e-03, 1.351760149739614e-02, 1.057318719561956e-02, 7.042986280557349e-03, 6.688207332260023e-03, 9.242479928666886e-03, 1.697645488609565e-02, 3.635599958328681e-03, 6.504682493927743e-03, 3.563624285275981e-03, 3.699688954984883e-03, 1.315769874291658e-02, 2.279271752536878e-03, 9.019542950263536e-03, 4.158995113557693e-03, 1.030761908341059e-02, 5.148347280536801e-03, 4.060666226715589e-03, 1.571929927646367e-02, 6.938437860606404e-03, 9.995304855541509e-03, 3.333537818931562e-03, 4.782228350407864e-03, 4.978866077138587e-03, 4.825758244694386e-03, 1.986402358228846e-02, 4.061407499565782e-03, 2.171602749353887e-03, 1.162935977065835e-02, 9.562725923188070e-03, 1.358884200886077e-02, 4.854768306389735e-03, 1.630366453734816e-02, 5.295643806411384e-03, 7.778092458348203e-03, 7.792190319481793e-03, 1.179505970411889e-02, 2.199538044946628e-03, 4.733779748416335e-03, 5.118260706377460e-03, 1.818689847499115e-03, 1.911468807572063e-03, 8.048439433650001e-03, 1.169996999064981e-02, 1.367356845265794e-02, 5.046535841642838e-03, 3.136125612987520e-02, 6.073464500373575e-03, 2.455015568669631e-03, 5.160060807815078e-03, 2.823982570213033e-03, 4.620418052708792e-03, 7.259013021218428e-03, 7.857237371972168e-03, 2.191770722177693e-03, 6.161821428869079e-03, 1.855299681289539e-02, 6.012725668947927e-03, 8.325364679699342e-03, 4.742670312547203e-03, 5.656866214620293e-03, 5.705514144945434e-03, 4.319826566135510e-03, 6.571411249697089e-03, 1.219611910216025e-02, 3.931397760127729e-03, 4.292946657155816e-03, 6.970574112894732e-03, 6.130921671907081e-03, 2.140528865688890e-03, 5.389775533514037e-03, 4.260016683097397e-03, 5.043397545842830e-03, 1.243452693238972e-02, 3.015665629376002e-03, 6.772670187360992e-03, 4.089376337548911e-03, 6.541214236979304e-03, 2.062348562696183e-02, 6.263024297330577e-03, 5.175763574554214e-03, 5.606075130539560e-03, 8.461268425818154e-03, 5.242985536017510e-03, 1.124613591768532e-02, 5.825578930264114e-03, 7.878328018651638e-03, 1.462876890475944e-02, 3.514542847587762e-03, 1.466784157507057e-02, 6.668381548409754e-03, 2.318610084991486e-02, 5.682099754470734e-03, 3.188068444001061e-03, 4.326770036912599e-03, 2.773328665224552e-03, 4.162498151712196e-03, 7.333945744386580e-03, 3.770678929922482e-03, 3.184611748280702e-03, 1.496907377043235e-02, 9.246947705953659e-03, 1.833750570773023e-02, 3.581733185401395e-03, 4.407664027598455e-03, 1.756791526509135e-02, 2.082965217993144e-02, 1.444560083886615e-02, 1.241209086735427e-02, 4.369956244914192e-03, 3.498879142530282e-03, 1.306796312546576e-02, 1.826418357287786e-03, 1.235223545509952e-02, 1.056301293848728e-02, 4.909745249120857e-03, 7.380383006131703e-03, 1.898943997987748e-02, 7.716401945243593e-03, 8.615541749962406e-03, 3.977381566264554e-03, 4.962466498868341e-03, 2.269432464724943e-02, 8.397388685643539e-03, 4.869546300092066e-03, 3.259554277739465e-03, 3.916907391053226e-03, 5.740749530882464e-03, 1.730935162776054e-02, 6.034864507152722e-03, 4.397714327039501e-03, 4.768729066922489e-03, 8.777164508156129e-03, 1.134320955683774e-02, 9.177847835902917e-03, 4.224839032778882e-03, 7.084883802604721e-03, 6.151804899314486e-03, 9.569882713584025e-03, 1.267038398983807e-02, 6.517136461680587e-03, 7.700225143051380e-03, 5.743353799231667e-03, 1.143897463680786e-02, 1.027338292674680e-02, 1.634067868698063e-02, 8.723144072438866e-03, 8.440399031927677e-03, 4.577387588083901e-03, 1.048530837944976e-02, 3.248490769685761e-03, 8.754246193703687e-03, 1.302820628786705e-02, 7.864748023482313e-03, 8.140902038424346e-03, 6.372216757866023e-03, 8.773955233195609e-03, 6.427652228742494e-03, 1.262584121172305e-02, 7.439726209791141e-03, 4.478204246709578e-03, 4.177352825094220e-03, 3.260812784049555e-03, 3.184281444715144e-03, 2.685651689094005e-03, 2.964813421053657e-03, 3.799365791805055e-03, 8.686928973310500e-03, 8.842701875447705e-03, 3.997919828439241e-03, 3.772037202528915e-03, 1.245562165407009e-02, 1.303845375105235e-02, 9.115290764423736e-03, 3.517244607120034e-03, 4.407995355151731e-03, 4.647269680407570e-03, 4.670798404507653e-03, 4.842159192021181e-03, 3.766746885131464e-03, 1.158849712189368e-02, 3.707104999208800e-03, 2.649172558696170e-03, 4.464127917191801e-03, 6.327792768114805e-03, 2.338019670103258e-03, 5.633122040486094e-03, 1.216980025001115e-02, 9.851315204499264e-03, 7.073937685157209e-03, 1.078302962952583e-02, 1.617480800380480e-02, 3.672799928333414e-03, 3.998223470600505e-03, 1.016000915621965e-02, 1.542840402894240e-02, 5.837977697056498e-03, 2.278254652157801e-02, 1.188484044206267e-02, 4.115985372075832e-03, 3.682242543692552e-03, 9.006280886079774e-03, 6.865213885341425e-03, 7.407083696171438e-03, 2.123743137357743e-02, 4.497534809145717e-03, 2.132753757394106e-03, 9.198955562314761e-03, 4.541836436273569e-03, 1.289063616581002e-02, 2.944983043449075e-03, 1.128655927548099e-02, 4.959513351259978e-03, 4.623674720521508e-03, 3.908568753661774e-03, 2.545996904130149e-03, 1.219349712857638e-02, 4.440606446650845e-03, 9.542097975191075e-03, 3.083296670034711e-03, 2.217000075748120e-02, 5.954758351709550e-03, 3.430205101157460e-03, 4.702738452461990e-03, 5.509407971987314e-03, 3.930134890148736e-03, 1.434205506870002e-02, 7.995078172742264e-03, 5.650309761592589e-03, 3.591432541213640e-03, 7.056568677411349e-03, 4.894337447647226e-03, 1.098224119238790e-02, 3.043425301440318e-03, 1.510229986177503e-02, 1.560625917546350e-02, 3.460873793658227e-03, 5.223279165825102e-03, 1.326702781003516e-02, 6.987448782929419e-03, 4.686189696921614e-03, 3.941640864293851e-03, 4.606965918655513e-03, 7.262472048458888e-03, 2.886615462909715e-03, 3.005029867700329e-03, 3.330770900753484e-03, 1.206025856644065e-02, 5.953527714366011e-03, 8.592482079338187e-03, 2.474071957087588e-03, 4.430769958963254e-03, 6.335259610849481e-03, 4.127399967587041e-03, 7.624174702831740e-03, 4.922863810168309e-03, 2.979394175242083e-03, 7.930792844200172e-03, 1.893478947317649e-03, 9.036824951153866e-03, 7.875988164900464e-03, 1.348361842596101e-02, 4.641365860444074e-03, 5.412922871989446e-03, 1.226550014928465e-02, 2.945967334156979e-03, 1.589067096401874e-02, 1.365747576438808e-02, 5.313467721052854e-03, 2.175437807939919e-03, 9.067417877192625e-03, 5.805145769338069e-03, 1.558589453673565e-03, 4.786784892709807e-03, 4.793887787961014e-03, 1.855196264386739e-02, 1.372548426619726e-02, 3.058446981938460e-03, 7.212216878924920e-03, 8.180139438446336e-03, 9.296990205864549e-03, 9.194383962975198e-03, 1.620079955575523e-02, 1.583223821730036e-02, 8.073475219880348e-03, 4.880282135981105e-03, 2.041501729905121e-02, 8.671376463625100e-03, 3.454021344929973e-03, 3.545924470326782e-03, 1.195123027713198e-02, 2.975252066117781e-03, 3.988175259088528e-03, 1.152498174474561e-02, 3.531728640037619e-03, 5.335719386774072e-03, 1.266379565870221e-02, 3.591439687417566e-03};


    // Get datastructures
    std::vector<pwm::SparseMatrix<double, unsigned int>*> matrices = pwm::get_all_matrices<double, unsigned int>();
    double* x = new double[mat_size];
    double* y = new double[mat_size];

    // To have more efficient partitioning testing
    std::vector<int> non_part = pwm::get_unpartitioned_methods();
    bool break_part;

    // Run test on all the matrices
    for (size_t mat_index = 0; mat_index < matrices.size(); ++mat_index) {
        pwm::SparseMatrix<double, unsigned int>* mat = matrices[mat_index];

        // Get omp max threads
        int max_threads = omp_get_max_threads();

        // If we have a TBB implementation set a global limiter to overwrite other limits
        tbb::global_control global_limit(tbb::global_control::max_allowed_parallelism, pwm::get_threads_for_matrix(mat_index));
        
        break_part = false;
        for (int partitions = 1; partitions <= std::min(max_threads*2, mat_size); ++partitions) {
            mat->loadFromTriplets(&input_mat, partitions);
            std::fill(x, x+mat_size, 1.);
            mat->powerIteration(x, y, 100);

            // Check solution
            for (int i = 0; i < mat_size; ++i) {
                BOOST_TEST(x[i] == real_sol[i]);
            }

            // If matrix does not use partitioning we break
            for (int index : non_part) {
                if (((int)mat_index-index) % pwm::get_amount_of_methods() == 0) {
                    break_part = true;
                    break;
                }
            }

            if (break_part) break;
        }

        // Reset omp threads
        omp_set_num_threads(max_threads);
    }

    delete [] x;
    delete [] y;
}

BOOST_AUTO_TEST_SUITE_END()